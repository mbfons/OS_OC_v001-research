group_by(region,code) %>%
summarise(Present=sum(had_instance),Absent=n()-Present) %>%
pivot_longer(c("Present","Absent"),names_to="Instance presence",values_to="no_practices") %>%
mutate(code=substr(code,4,nchar(code)))
tbx_practice_flags_ <- tbx_practice_flags_ %>%
group_by(code) %>%
summarise(Present=sum(had_instance),Absent=n()-Present) %>%
pivot_longer(c("Present","Absent"),names_to="Instance presence",values_to="no_practices") %>%
mutate(code=substr(code,4,nchar(code)))
tbx_practice_flags_$`Instance presence` <- factor(tbx_practice_flags_$`Instance presence`)
ggplot(tbx_practice_flags_, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(hjust=0.5),position = position_stack(vjust = 0.2))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")+coord_flip()
ggsave(paste0(here::here("output","plots"),"/sc03_fig03_pracnatcoverage.svg"),width = 30, height = 20, dpi=300,units ="cm")
ggplot(tbx_practice_flags_reg, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(hjust=0),position = position_stack(vjust = 0.2))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")+facet_wrap(~region,scales="free_x")+coord_flip()
ggsave(paste0(here::here("output","plots"),"/sc03_fig04_pracbyregcoverage.svg"),width = 30, height = 20, dpi=300,units ="cm")
rm(df_input)
rm(df_practice_flags)
rm(tbx_practice_flags_)
rm(tbx_practice_flags_reg)
df_summary_long <- df_summary %>% pivot_longer(cols=starts_with("OC"),
names_to="Code",
values_to="Count") %>% filter(Code %!in% c("OC_population"))
df_summary_long$Count <- redactor(df_summary_long$Count,threshold =6,e_overwrite=NA_integer_)
write.csv(df_summary_long,paste0(here::here("output","tables"),"/sc03_tb01_nattrends.csv"))
View(df_summary_long)
View(df_summary)
df_summary_long <- df_summary %>% pivot_longer(cols=starts_with("OC"),
names_to="Code",
values_to="Count")
df_summary_long$Count <- redactor(df_summary_long$Count,threshold =6,e_overwrite=NA_integer_)
write.csv(df_summary_long,paste0(here::here("output","tables"),"/sc03_tb01_nattrends.csv"))
df_summary_long <- df_summary_long %>% filter(Code %!in% c("OC_population"))
df_summary_long$month <- as.Date(df_summary_long$month)
ggplot(data=df_summary_long,aes(x=month,y=Count,group=Code)) +
geom_bar(stat="identity",fill="#56B4E9") +
facet_wrap(~Code,nrow=4,scales="free_y") +
labs("Number of code instances")+
scale_x_date(date_breaks = "2 months",expand=c(0,0))  +
theme(axis.text.x = element_text(angle = -90,vjust = 0))
ggsave(paste0(here::here("output","plots"),"/sc03_fig01_nattrends.svg"),width = 25, height = 30, dpi=300,units ="cm")
ggplot(data=df_summary_long %>% filter(Code%!in% c("OC_gp_consult_count","OC_population","OC_OC10")),aes(x=month,y=Count,color=Code)) +
geom_line()+
scale_x_date(date_breaks = "2 months",expand=c(0,0))+
theme(axis.text.x = element_text(angle = -90,vjust = 0))
ggsave(paste0(here::here("output","plots"),"/sc03_fig02_nattrends.svg"),width = 40, height = 20, dpi=300,units ="cm")
## library
library(tidyverse)
library(here)
library(svglite)
# create directory for saving plots, if not existent
if (!dir.exists(here::here("output", "plots"))){
dir.create(here::here("output", "plots"))
}
# create directory for saving plots, if not existent
if (!dir.exists(here::here("output", "tables"))){
dir.create(here::here("output", "tables"))
}
## Redactor code (W.Hulme)
redactor <- function(n, threshold=6,e_overwrite=NA_integer_){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, e_overwrite, n)
}
n_meas=7
md_tbl <- tibble(
measure = c("gpc","OC_OC10", "OC_Y1f3b","OC_Y22b4","OC_XaXcK","OC_computerlink","OC_alertreceived"),
measure_col=c("gp_consult_count","OC_OC10", "OC_Y1f3b","OC_Y22b4","OC_XaXcK","OC_computerlink","OC_alertreceived"),
measure_label = c("GPconsult","OC_OC10", "OC_Y1f3b","OC_Y22b4","OC_XaXcK","OC_computerlink","OC_alertreceived"),
by = rep("practice",1,n_meas),
by_label = rep("by practice",1,n_meas),
id = paste0(measure, "_", by),
numerator = measure,
denominator = "population",
group_by = rep("practice",1,n_meas)
)
print("> Tibble creation")
## import measures data from look-up
measures <- md_tbl %>%
mutate(
data = map(id, ~read_csv(here::here("output","measures", glue::glue("measure_{.}.csv")))),
)
p_saving <- function(id,data) {
write.csv(paste0(here::here("output","measures"),"/red_measure_",id,".csv"))
return(data)
}
# Create redacted measures and save
measures <- measures %>%
mutate(
redacted_data = pmap(lst(id,measure_col,data),
function(id,measure_col,data) {
redacted_data <- data %>% mutate_at(vars(measure_col),redactor)
redacted_data$value <- ifelse(is.na(redacted_data %>% select(measure_col)),NA,redacted_data$value)
write.csv(redacted_data,paste0(here::here("output","tables"),"/redacted_measure_",id,".csv"))
return(redacted_data)
}
)
)
measures <- measures %>% mutate(no_2020_events = pmap(lst( data, measure_col),
function(data, measure_col){
data %>% filter(as.numeric(format(date,'%Y'))==2020) %>% select(measure_col) %>% sum()
}
))
measures_gpc_pratice <- measures$data[[match("gpc_practice",measures$id)]]
measures_gpc_pop <-
measures_gpc_pratice %>%
group_by(date) %>%
summarise(population=sum(population),gp_consult_count=sum(gp_consult_count),value=gp_consult_count/population)
write.csv(measures_gpc_pop,paste0(here::here("output"),"/measures_gpc_pop.csv")) # National monthly GP consultation instances. Suppression not needed.
measures_gpc_pop %>% mutate(value_10000 = value*10000) %>%
ggplot()+
geom_line(aes_string(x="date", y="value_10000"), alpha=0.2, colour='blue', size=0.25)+
scale_x_date(date_breaks = "1 month", labels = scales::date_format("%Y-%m"))+
labs(
x=NULL, y=NULL,
title="GP consultation instances",
subtitle =  glue::glue("GP consulation rate per 10,000 patients")
)+
theme_bw()+
theme(
panel.border = element_blank(),
axis.text.x = element_text(angle = 70, vjust = 1, hjust=1),
)
ggsave(
units = "cm",
height = 10,
#width = 15,
limitsize=FALSE,
filename = str_c("plot_overall_gpc_pop.svg"),
path = here::here("output", "plots"))  # National monthly GP consultation instances. Suppression not needed.
measures <- measures %>% mutate(
data_ori=data, # data with all practices
data = map(data, ~ (.) %>% group_by(practice) %>% filter(sum(value,na.rm=T)>0)), # data with only practices with at least an observation in the study period (affects deciles)
no_prac = map(data, ~(.) %>% .$practice %>% n_distinct(na.rm=T) ),
no_prac_univ = map(data_ori, ~(.) %>% .$practice %>% n_distinct(na.rm=T))
)
quibble <- function(x, q = c(0.25, 0.5, 0.75)) {
## function that takes a vector and returns a tibble of quantiles - default is quartile
tibble("{{ x }}" := quantile(x, q), "{{ x }}_q" := q)
}
v_median <- function(x) {
tibble(median := quantile(x,0.5))
}
v_idr <- function(x){
tibble(IDR := quantile(x,0.9)-quantile(x,0.1))
}
str_medidrnarrative <- function(mydata_idr){
a<- mydata_idr %>%
summarise(date,medchange = (median - lag(median,12))/lag(median,12)*100  ) %>%
mutate(classification=case_when(
between(medchange,-15,15) ~ "no change",
medchange>15 ~ "increase",
medchange<(-60) ~ "large drop",
medchange<(-15) ~ "drop",
TRUE ~ NA_character_,
) )
paste0("Change in median from 2019: April ",
round(as.numeric(a[a$date=="2020-04-01","medchange"]),1),"% (",a[a$date=="2020-04-01","classification"],"); ",
"September ",round(as.numeric(a[a$date=="2020-09-01","medchange"]),1),"% (",a[a$date=="2020-09-01","classification"],"); ",
"December ", round(as.numeric(a[a$date=="2020-12-01","medchange"]),1),"% (",a[a$date=="2020-12-01","classification"],");")
}
flag_run=T
if(flag_run){
## generate plots for each measure within the data frame
measures_plots <- measures %>%
mutate(
data_quantiles = map(data, ~ (.) %>% group_by(date) %>% summarise(quibble(value, seq(0,1,0.1)))),
#data_median = map(data_quantiles, ~ (.) %>% group_by(date) %>% filter(value_q==0.5) %>% transmute(median=value)),
data_idr = map(data, ~ (.) %>% group_by(date) %>% summarise(v_idr(value*1000),v_median(value*1000))),
plot_by = pmap(lst( group_by, data, measure_label, by_label),
function(group_by, data, measure_label, by_label){
data %>% mutate(value_1000 = value*1000) %>%
ggplot()+
geom_line(aes_string(x="date", y="value_1000", group=group_by), alpha=0.2, colour='blue', size=0.25)+
scale_x_date(date_breaks = "1 month", labels = scales::date_format("%Y-%m"))+
labs(
x=NULL, y=NULL,
title=glue::glue("{measure_label} measurement"),
subtitle =  glue::glue("{by_label}, per 10,000 patients")
)+
theme_bw()+
theme(
panel.border = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.text.x = element_text(angle = 70, vjust = 1, hjust=1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
)
}
),
plot_quantiles = pmap(lst( group_by, data_quantiles, measure_label, by_label),
function(group_by, data_quantiles, measure_label, by_label){
data_quantiles %>% mutate(value_1000 = value*1000) %>%
ggplot()+
geom_line(aes(x=date, y=value_1000, group=value_q, linetype=value_q==0.5, size=value_q==0.5), colour='blue')+
scale_linetype_manual(breaks=c(TRUE, FALSE), values=c("solid", "dotted"), guide=FALSE)+
scale_size_manual(breaks=c(TRUE, FALSE), values=c(1, 0.4), guide=FALSE)+
scale_x_date(date_breaks = "1 month", labels = scales::date_format("%Y-%m"))+
labs(
x=NULL, y=NULL,
title=glue::glue("{measure_label} instances per 1000 patients"),
subtitle = glue::glue("quantiles {by_label}")
)+
theme_bw()+
theme(
panel.border = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.text.x = element_text(angle = 70, vjust = 1, hjust=1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
#axis.line.y = element_blank(),
)
}
),
plot_quantiles2 = pmap(lst( group_by, data_quantiles, measure_label, by_label,data_idr,no_2020_events,no_prac,no_prac_univ),
function(group_by, data_quantiles, measure_label, by_label,data_idr,no_2020_events,no_prac,no_prac_univ){
data_quantiles %>% mutate(value_1000 = value*1000) %>%
ggplot()+
geom_line(aes(x=date, y=value_1000, group=value_q, linetype=value_q==0.5, size=value_q==0.5), colour='blue')+
scale_linetype_manual(breaks=c(TRUE,FALSE), values=c("solid", "dashed"), guide=FALSE,labels=c("median","decile"))+
scale_size_manual(breaks=c(TRUE, FALSE), values=c(1, 0.5), guide=FALSE)+
scale_x_date(date_breaks = "1 month", labels = scales::date_format("%Y-%m"))+
labs(
x=NULL,
y="rate per 1,000",
linetype="metric",
title=glue::glue("{measure_label}"),
subtitle = paste0(
"Practices included: ",
no_prac, " (",round(no_prac/no_prac_univ*100,1),"%)",
"; 2020 events: ",
paste0(round(no_2020_events/1000,1),"k"),
"; 2020 patients: ",
"TBA"
),
caption=paste0("Feb median: ",
round(data_idr %>% filter(date=="2020-02-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-02-01") %>% .$IDR ,1),"), ",
"April median: ",
round(data_idr %>% filter(date=="2020-04-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-04-01") %>% .$IDR ,1),"),\n ",
"September median: ",
round(data_idr %>% filter(date=="2020-09-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-09-01") %>% .$IDR ,1),"), ",
"December median: ",
round(data_idr %>% filter(date=="2020-12-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-12-01") %>% .$IDR ,1),")\n",
str_medidrnarrative(data_idr)
)
)+
theme_bw()+
theme(
panel.border = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.text.x = element_text(angle = 70, vjust = 1, hjust=1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.line.y = element_blank(),
plot.caption = element_text(color = "gray64", size=7)
)
}
)
)
## plot the charts (by variable)
# measures_plots %>%
#   transmute(
#     plot = plot_by,
#     units = "cm",
#     height = 10,
#     width = 15,
#     limitsize=FALSE,
#     filename = str_c("plot_each_", id, ".svg"),
#     path = here::here("output", "plots"),
#   ) %>%
#   pwalk(ggsave)
## plot the charts (by quantile)
measures_plots %>%
transmute(
plot = plot_quantiles2,
units = "cm",
height = 10,
width = 15,
limitsize=FALSE,
filename = str_c("plot_quantiles_", id, ".svg"),
path = here::here("output", "plots"),
) %>%
pwalk(ggsave)
}
## close log connection
sink()
# create directory for saving plots, if not existent
if (!dir.exists(here::here("output", "plots"))){
dir.create(here::here("output", "plots"))
}
# create directory for saving plots, if not existent
if (!dir.exists(here::here("output", "tables"))){
dir.create(here::here("output", "tables"))
}
## library
library(tidyverse)
library(here)
library(svglite)
`%!in%` = Negate(`%in%`)
query_dates=seq(as.Date("2019-01-01"),length=24,by="months")
query_dates <- paste0(query_dates)
## Redactor code (W.Hulme)
redactor <- function(n, threshold,e_overwrite=NA_integer_){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, e_overwrite, n)
}
df_input <- read_csv(
here::here("output","measures",paste0("input_measures_bycode_",  query_dates[1], ".csv")))
df_input <- df_input %>% mutate(month=query_dates[1])
for (datenow in tail(query_dates,-1)){
df_input_now <- read_csv(
here::here("output","measures",paste0("input_measures_bycode_",  datenow, ".csv")))
df_input_now <- df_input_now %>% mutate(month=datenow)
df_input <- df_input %>% bind_rows(df_input_now)
}
df_input <- as.data.frame(df_input)
df_input <- df_input %>% rename(OC_gp_consult_count=gp_consult_count)
rm(df_input_now)
df_summary <- df_input %>%
group_by(month) %>%
summarise_at(vars(starts_with("OC")),~sum(.,na.rm=T))
df_summary_pop <- df_input %>% group_by(month) %>% summarise(OC_population=n())
df_summary <- left_join(df_summary,df_summary_pop,id="month")
rm(df_summary_pop)
# create directory for saving tables, if not existent
if (!dir.exists(here::here("output", "tables"))){
dir.create(here::here("output", "tables"))
}
## import and pre-process cohort data
df_input <- read_csv(
here::here("output", "input_ori.csv"))
df_cleaned <- df_input %>%
mutate(age_group = factor(cut(age,breaks = c(0,18,40,50,60,70,80, Inf),dig.lab = 2)),
sex = factor(case_when(sex=="F" ~ "Female",sex=="M" ~ "Male",TRUE ~ "Other/Unknown")),
ethnicity = factor(case_when(ethnicity==1 ~ "White",ethnicity==2 ~ "Mixed",ethnicity==3 ~ "Asian",ethnicity==4 ~ "Black",ethnicity==5 ~ "Other",TRUE~"Other")),
care_home_type=factor(case_when(care_home_type=="PC" ~ "Care home",care_home_type=="PN" ~ "Care home",care_home_type=="PS" ~ "Care home",TRUE ~ "Non")),
gp_consult_had = ifelse(is.na(gp_consult_count)|gp_consult_count==0,0,1),
oc_instance_had = ifelse(is.na(OC_instance)|OC_instance==0,0,1),
livingalone = ifelse(hh_size<=1,1,0),
has_disability = ifelse(is.na(has_disability),0,has_disability),
imd_quin=ifelse(is.na(imd)|imd==0,NA_integer_,imd),
rural_urban=factor(case_when(rural_urban %in% c(1,2,3,4)~"Urban",rural_urban %in% c(5,6,7,8)~"Rural",TRUE~"Other"))
)
## Characteristics of those with any OC consultation, any GP consultation and overall population
desc_vars=c("sex","age","age_group","ethnicity","livingalone","region","imd_quin","rural_urban","care_home_type","oc_instance_had")
(gt_ocpop <- df_cleaned %>% select(desc_vars) %>% tbl_summary(by=oc_instance_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Characteristic | had OC**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had any OC instance**"))
desc_vars2=c("sex","age","age_group","ethnicity","livingalone","region","imd_quin","rural_urban","care_home_type","gp_consult_had")
(gt_gpcpop <- df_cleaned %>% select(desc_vars2) %>% tbl_summary(by=gp_consult_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Characteristic | had GP consultation**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had any GP consultation**"))
# steps to remove input data and strip further where possible
gt_gpcpop$inputs <- NULL
gt_gpcpop$call_list <- NULL
gt_gpcpop$meta_data <- NULL
gt_ocpop$inputs <- NULL
gt_ocpop$call_list <- NULL
gt_ocpop$meta_data <- NULL
# Save dta with actual table data, but underlying data removed
save(gt_ocpop,file = file.path(here::here("output","tables"), "gt_ocpop.RData"))
save(gt_gpcpop,file = file.path(here::here("output","tables"), "gt_gpcpop.RData"))
aux<-gt_ocpop$table_body
aux<-gt_ocpop$table_body %>% as.dataframe
aux<-gt_ocpop$table_body %>% as.data_frame
aux<-gt_ocpop$table_body %>% dataframe
class(aux)
View(class(aux))
View(aux)
View(class(as.data.frame(aux)))
# Save unformatted for disclosiveness assessment
aux<-as.data.frame(gt_ocpop$table_body)
write.csv(aux,paste0(here::here("output","tables"),"/gt_ocpop_unformatted.csv"))
aux<-as.data.frame(gt_gpcpop$table_body)
write.csv(aux,paste0(here::here("output","tables"),"/gt_gpcpop_unformatted.csv"))
View(aux)
View(gt_ocpop)
class(aux)
View(gt_ocpop)
View(aux)
View(apply(aux,df,2,as.character))
View(apply(aux,2,as.character))
# Save unformatted for disclosiveness assessment
aux<-as.data.frame(gt_ocpop$table_body); aux <- apply(aux,2,as.character)
View(aux)
View(aux$variable %>% class)
View(aux$variable)
View(aux)
# Save unformatted for disclosiveness assessment
aux<-as.data.frame(gt_ocpop$table_body); aux <- apply(aux,2,as.character)
write.csv(aux,paste0(here::here("output","tables"),"/gt_ocpop_unformatted.csv"))
aux<-as.data.frame(gt_gpcpop$table_body);aux <- apply(aux,2,as.character)
write.csv(aux,paste0(here::here("output","tables"),"/gt_gpcpop_unformatted.csv"))
# Save unformatted for disclosiveness assessment
aux<-as.data.frame(gt_ocpop$table_body); aux <- apply(aux,2,as.character)
write.csv(aux,paste0(here::here("output","tables"),"/gt_ocpop_unformatted.csv"))
aux<-as.data.frame(gt_gpcpop$table_body);aux <- apply(aux,2,as.character)
write.csv(aux,paste0(here::here("output","tables"),"/gt_gpcpop_unformatted.csv"))
# create directory for saving plots, if not existent
if (!dir.exists(here::here("output", "plots"))){
dir.create(here::here("output", "plots"))
}
# create directory for saving plots, if not existent
if (!dir.exists(here::here("output", "tables"))){
dir.create(here::here("output", "tables"))
}
## library
library(tidyverse)
library(here)
library(svglite)
`%!in%` = Negate(`%in%`)
query_dates=seq(as.Date("2019-01-01"),length=24,by="months")
query_dates <- paste0(query_dates)
## Redactor code (W.Hulme)
redactor <- function(n, threshold,e_overwrite=NA_integer_){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, e_overwrite, n)
}
df_input <- read_csv(
here::here("output","measures",paste0("input_measures_bycode_",  query_dates[1], ".csv")))
df_input <- df_input %>% mutate(month=query_dates[1])
for (datenow in tail(query_dates,-1)){
df_input_now <- read_csv(
here::here("output","measures",paste0("input_measures_bycode_",  datenow, ".csv")))
df_input_now <- df_input_now %>% mutate(month=datenow)
df_input <- df_input %>% bind_rows(df_input_now)
}
df_input <- as.data.frame(df_input)
df_input <- df_input %>% rename(snomedc_gp_consult_count=gp_consult_count)
rm(df_input_now)
myprefix="snomed"
df_summary <- df_input %>%
group_by(month) %>%
summarise_at(vars(starts_with(myprefix)),~sum(.,na.rm=T))
df_summary_pop <- df_input %>% group_by(month) %>% summarise(OC_population=n_distinct(patient_id))
df_summary <- left_join(df_summary,df_summary_pop,id="month")
rm(df_summary_pop)
## Calculations for practice coverage
df_practice_flags <- df_input %>% group_by(region,stp,practice) %>% summarise_at(vars(starts_with(myprefix)),~ifelse(sum(.,na.rm=T)>0,1,0))
tbx_practice_flags_ <- pivot_longer(df_practice_flags,cols=starts_with(myprefix),
names_to="code",
values_to="had_instance")
tbx_practice_flags_reg <- tbx_practice_flags_ %>%
group_by(region,code) %>%
summarise(Present=sum(had_instance),Absent=n()-Present) %>%
pivot_longer(c("Present","Absent"),names_to="Instance presence",values_to="no_practices") %>%
mutate(code=substr(code,nchar(myprefix)+2,nchar(code)))
tbx_practice_flags_ <- tbx_practice_flags_ %>%
group_by(code) %>%
summarise(Present=sum(had_instance),Absent=n()-Present) %>%
pivot_longer(c("Present","Absent"),names_to="Instance presence",values_to="no_practices") %>%
mutate(code=substr(code,nchar(myprefix)+2,nchar(code)))
tbx_practice_flags_$`Instance presence` <- factor(tbx_practice_flags_$`Instance presence`)
ggplot(tbx_practice_flags_, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(vjust=0),position = position_stack(vjust = 0.2))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")+
coord_flip()
ggsave(paste0(here::here("output","plots"),"/sc03_fig03_pracnatcoverage.svg"),width = 30, height = 20, dpi=300,units ="cm")
ggplot(tbx_practice_flags_reg, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(hjust=-1),position = position_stack(vjust = 0.0))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")+facet_wrap(~region)+
coord_flip()
ggsave(paste0(here::here("output","plots"),"/sc03_fig04_pracbyregcoverage.svg"),width = 30, height = 30, dpi=300,units ="cm")
