round(data_idr %>% filter(date=="2020-09-01") %>% .$IDR ,1),"), ",
"December median: ",
round(data_idr %>% filter(date=="2020-12-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-12-01") %>% .$IDR ,1),")\n",
str_medidrnarrative(data_idr)
)
)+
theme_bw()+
theme(
panel.border = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.text.x = element_text(angle = 70, vjust = 1, hjust=1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.line.y = element_blank(),
plot.caption = element_text(color = "gray64", size=7)
)
}
)
)
## plot the charts (by variable)
measures_plots %>%
transmute(
plot = plot_by,
units = "cm",
height = 10,
width = 15,
limitsize=FALSE,
filename = str_c("plot_each_", id, ".svg"),
path = here::here("output", "plots"),
) %>%
pwalk(ggsave)
## plot the charts (by quantile)
measures_plots %>%
transmute(
plot = plot_quantiles2,
units = "cm",
height = 10,
width = 15,
limitsize=FALSE,
filename = str_c("plot_quantiles_", id, ".svg"),
path = here::here("output", "plots"),
) %>%
pwalk(ggsave)
## close log connection
sink()
## Redactor code (W.Hulme)
redactor <- function(n, threshold,e_overwrite=NA_integer_){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, e_overwrite, n)
}
## Redactor code (W.Hulme)
redactor <- function(n, threshold,e_overwrite=NA_integer_){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, e_overwrite, n)
}
View(measures$data[[1]])
aux<-measures$data[[1]]
aux[2,]<-redacted(aux[2,])
## Redactor code (W.Hulme)
redactor <- function(n, threshold,e_overwrite=NA_integer_){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, e_overwrite, n)
}
aux[2,]<-redactor(aux[2,])
## Redactor code (W.Hulme)
redactor <- function(n, threshold=6,e_overwrite=NA_integer_){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, e_overwrite, n)
}
aux[2,]<-redactor(aux[2,])
aux[,2]<-redactor(aux[,2])
a<-aux[,2]
View(s)
View(a)
aux$gp_consult_count<-redactor(aux$gp_consult_count)
a <- a %>% mutate_at(vars(measure_col),redactor)
measure_col="gp_consult_count"
a <- a %>% mutate_at(vars(measure_col),redactor)
View(a)
a <- a %>% mutate_at(vars(measure_col),~redactor(.,500))
a<-aux[,2]
a <- a %>% mutate_at(vars(measure_col),~redactor(.,500))
a<-aux[,2]
a <- a %>% mutate_at(vars(measure_col),redactor)
aux<-measures$data[[1]]
aux2 <- aux2 %>% mutate_at(vars(measure_col),redactor)
View(aux)
aux2 <- aux %>% mutate_at(vars(measure_col),redactor)
aux2 <- aux %>% mutate_at(vars(measure_col),~redactor(.,500))
View(aux2)
aux %>% select_vars(measure_col)
aux %>% select(measure_col)
# create look-up table to iterate over
md_tbl <- tibble(
measure = c("gpc", "OC_Y1f3b", "OC_XUkjp", "OC_XaXcK","OC_XVCTw","OC_XUuWQ","OC_XV1pT","OC_9N34d","OC_d9N34","OC_XUman","OC_Y22b4"),
measure_col=c("gp_consult_count", "OC_Y1f3b", "OC_XUkjp", "OC_XaXcK","OC_XVCTw","OC_XUuWQ","OC_XV1pT","OC_9N34d","OC_d9N34","OC_XUman","OC_Y22b4"),
measure_label = c("GPconsult", "Y1f3b", "XUkjp", "XaXcK","XVCTw","XUuWQ","XV1pT","9N34d","d9N34","XUman","Y22b4"),
by = rep("practice",1,11),
by_label = rep("by practice",1,11),
id = paste0(measure, "_", by),
numerator = measure,
denominator = "population",
group_by = rep("practice",1,11)
)
## import measures data from look-up
measures <- md_tbl %>%
mutate(
data = map(id, ~read_csv(here::here("output","measures", glue::glue("measure_{.}.csv")))),
)
p_saving <- function(id,data) {
write.csv(paste0(here::here("output","measures"),"/red_measure_",id,".csv"))
return(data)
}
# Create redacted measures and save
measures <- measures %>%
mutate(
redacted_data = pmap(lst(id,measure_col,data),
function(id,measure_col,data) {
redacted_data <- data %>% mutate_at(vars(measure_col),redactor)
write.csv(redacted_data,paste0(here::here("output","tables"),"/redacted_measure_",id,".csv"))
return(redacted_data)
}
)
)
aux<-measures$data[[1]]
aux %>% select(measure_col)
redacted_data <- aux%>% mutate_at(vars(measure_col),redactor)
redacted_data <- redacted_data %>% mutate_at(value=select(measure_col))
redacted_data <- redacted_data %>% mutate_at(value=select(vars(measure_col)))
redacted_data <- redacted_data %>% mutate(value=select(vars(measure_col)))
redacted_data <- redacted_data %>% mutate(value=select(measure_col))
View(redacted_data)
redacted_data$value <- ifelse(is.na(redacted_data[,2],NA,redacted_data$value))
redacted_data$value <- ifelse(is.na(redacted_data %>% select(measure_col),NA,redacted_data$value))
redacted_data$value <- ifelse(is.na(redacted_data %>% select(measure_col)),NA,redacted_data$value)
redacted_data <- aux%>% mutate_at(vars(measure_col),~redactor(.,500))
redacted_data$value <- ifelse(is.na(redacted_data %>% select(measure_col)),NA,redacted_data$value)
View(redacted_data)
# Create redacted measures and save
measures <- measures %>%
mutate(
redacted_data = pmap(lst(id,measure_col,data),
function(id,measure_col,data) {
redacted_data <- data %>% mutate_at(vars(measure_col),redactor)
redacted_data$value <- ifelse(is.na(redacted_data %>% select(measure_col)),NA,redacted_data$value)
write.csv(redacted_data,paste0(here::here("output","tables"),"/redacted_measure_",id,".csv"))
return(redacted_data)
}
)
)
paste0(here::here("output","tables"),"/sc03_tb01_nattrends.csv")
## open log connection to file
sink(here::here("logs", "log-03-createnattrends.txt"))
## library
library(tidyverse)
library(here)
library(svglite)
`%!in%` = Negate(`%in%`)
query_dates=seq(as.Date("2019-01-01"),length=24,by="months")
query_dates <- paste0(query_dates)
## Redactor code (W.Hulme)
redactor <- function(n, threshold,e_overwrite=NA_integer_){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, e_overwrite, n)
}
df_input <- read_csv(
here::here("output","measures",paste0("input_measures_bycode_",  query_dates[1], ".csv")))
df_input <- df_input %>% mutate(month=query_dates[1])
for (datenow in tail(query_dates,-1)){
df_input_now <- read_csv(
here::here("output","measures",paste0("input_measures_bycode_",  datenow, ".csv")))
df_input_now <- df_input_now %>% mutate(month=datenow)
df_input <- df_input %>% bind_rows(df_input_now)
}
df_input <- as.data.frame(df_input)
df_input <- df_input %>% rename(OC_gp_consult_count=gp_consult_count)
rm(df_input_now)
View(df_input)
df_praccov <- df_input %>% group_by(region,stp,practice) %>% summarise_at(vars(starts_with("OC"),sum))
df_praccov <- df_input %>% group_by(region,stp,practice) %>% summarise_at(vars(starts_with("OC")),sum(.,na.rm=T))
df_praccov <- df_input %>% group_by(region,stp,practice) %>% summarise_at(vars(starts_with("OC")),~sum(.,na.rm=T))
View(df_praccov)
df_praccov <- df_input %>% group_by(region,stp,practice) %>% summarise_at(vars(starts_with("OC")),~ifelse(sum(.,na.rm=T)>0,1,0))
View(df_praccov)
## Calculations for practice coverage
df_practice_flags <- df_input %>% group_by(region,stp,practice) %>% summarise_at(vars(starts_with("OC")),~ifelse(sum(.,na.rm=T)>0,1,0))
tbx_practice_flags_ <- pivot_longer(df_practice_flags,cols=starts_with("OC"),
names_to="code",
values_to="had_instance")
View(tbx_practice_flags_)
substr("aaaaaaaa",4,)
"aaa"
a<-"aaa"
length(a)
aa<-length(a)
nchar("aaa")
aa<-nchar("aaa")
aa<-nchar("aaa")>3
aa<-nchar("aaa")<=3
tbx_practice_flags_ <- pivot_longer(df_practice_flags,cols=starts_with("OC"),
names_to="code",
values_to="had_instance")
tbx_practice_flags_ <- tbx_practice_flags_ %>%
group_by(code) %>%
summarise(Present=sum(had_instance),Absent=n()-Present) %>%
pivot_longer(c("Present","Absent"),names_to="Instance presence",values_to="no_practices") %>%
mutate(code=substr(code,4,nchar(code)))
tbx_practice_flags_$`Instance presence` <- factor(tbx_practice_flags_$`Instance presence`)
ggplot(tbx_practice_flags_, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(vjust=-1),position = position_stack(vjust = 0.2))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")
View(df_practice_flags)
tbx_practice_flags_ <- pivot_longer(df_practice_flags,cols=starts_with("OC"),
names_to="code",
values_to="had_instance")
tbx_practice_flags_ <- tbx_practice_flags_ %>%
group_by(region,code) %>%
summarise(Present=sum(had_instance),Absent=n()-Present) %>%
pivot_longer(c("Present","Absent"),names_to="Instance presence",values_to="no_practices") %>%
mutate(code=substr(code,4,nchar(code)))
View(tbx_practice_flags_)
ggplot(tbx_practice_flags_, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(vjust=-1),position = position_stack(vjust = 0.2))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")+facet_wrap(~region)
tbx_practice_flags_ <- tbx_practice_flags_ %>%
group_by(region,code) %>%
summarise(Present=sum(had_instance),Absent=n()-Present) %>%
pivot_longer(c("Present","Absent"),names_to="Instance presence",values_to="no_practices") %>%
mutate(code=substr(code,4,nchar(code)))
ggplot(tbx_practice_flags_, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(vjust=-1),position = position_stack(vjust = 0.2))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")
tbx_practice_flags_nat <- tbx_practice_flags_ %>%
group_by(region,code) %>%
summarise(Present=sum(had_instance),Absent=n()-Present) %>%
pivot_longer(c("Present","Absent"),names_to="Instance presence",values_to="no_practices") %>%
mutate(code=substr(code,4,nchar(code)))
tbx_practice_flags_ <- pivot_longer(df_practice_flags,cols=starts_with("OC"),
names_to="code",
values_to="had_instance")
tbx_practice_flags_nat <- tbx_practice_flags_ %>%
group_by(code) %>%
summarise(Present=sum(had_instance),Absent=n()-Present) %>%
pivot_longer(c("Present","Absent"),names_to="Instance presence",values_to="no_practices") %>%
mutate(code=substr(code,4,nchar(code)))
tbx_practice_flags_$`Instance presence` <- factor(tbx_practice_flags_$`Instance presence`)
tbx_practice_flags_nat$`Instance presence` <- factor(tbx_practice_flags_nat$`Instance presence`)
ggplot(tbx_practice_flags_nat, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(vjust=-1),position = position_stack(vjust = 0.2))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")
ggplot(tbx_practice_flags_reg, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(vjust=-1),position = position_stack(vjust = 0.2))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")+facet_wrap(~region)
tbx_practice_flags_reg <- tbx_practice_flags_ %>%
group_by(region,code) %>%
summarise(Present=sum(had_instance),Absent=n()-Present) %>%
pivot_longer(c("Present","Absent"),names_to="Instance presence",values_to="no_practices") %>%
mutate(code=substr(code,4,nchar(code)))
ggplot(tbx_practice_flags_reg, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(vjust=-1),position = position_stack(vjust = 0.2))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")+facet_wrap(~region)
rm(tbx_practice_flags_reg)
ggplot(tbx_practice_flags_, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(vjust=-1),position = position_stack(vjust = 0.2))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")
ggsave(paste0(here::here("output","plots"),"/sc03_fig03_pracnatcoverage.svg"),width = 40, height = 20, dpi=300,units ="cm")
tbx_practice_flags_ <- tbx_practice_flags_ %>%
group_by(code) %>%
summarise(Present=sum(had_instance),Absent=n()-Present) %>%
pivot_longer(c("Present","Absent"),names_to="Instance presence",values_to="no_practices") %>%
mutate(code=substr(code,4,nchar(code)))
tbx_practice_flags_$`Instance presence` <- factor(tbx_practice_flags_$`Instance presence`)
ggplot(tbx_practice_flags_, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(vjust=-1),position = position_stack(vjust = 0.2))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")
ggsave(paste0(here::here("output","plots"),"/sc03_fig03_pracnatcoverage.svg"),width = 40, height = 20, dpi=300,units ="cm")
ggplot(tbx_practice_flags_reg, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(vjust=-1),position = position_stack(vjust = 0.2))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")+facet_wrap(~region)
tbx_practice_flags_ <- pivot_longer(df_practice_flags,cols=starts_with("OC"),
names_to="code",
values_to="had_instance")
tbx_practice_flags_reg <- tbx_practice_flags_ %>%
group_by(region,code) %>%
summarise(Present=sum(had_instance),Absent=n()-Present) %>%
pivot_longer(c("Present","Absent"),names_to="Instance presence",values_to="no_practices") %>%
mutate(code=substr(code,4,nchar(code)))
ggplot(tbx_practice_flags_reg, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(vjust=-1),position = position_stack(vjust = 0.2))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")+facet_wrap(~region)
ggsave(paste0(here::here("output","plots"),"/sc03_fig03_pracbyregcoverage.svg"),width = 40, height = 20, dpi=300,units ="cm")
ggplot(tbx_practice_flags_reg, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(vjust=-1),position = position_stack(vjust = 0.0))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")+facet_wrap(~region)
ggsave(paste0(here::here("output","plots"),"/sc03_fig03_pracbyregcoverage.svg"),width = 40, height = 20, dpi=300,units ="cm")
tbx_practice_flags_nat$code %>% unique
a<- tbx_practice_flags_nat$code %>% unique
df_summary_long <- df_summary %>% pivot_longer(cols=starts_with("OC"),
names_to="Code",
values_to="Count") %>% filter(Code %!in% c("OC_population"))
df_summary <- df_input %>%
group_by(month) %>%
summarise_at(vars(starts_with("OC")),~sum(.,na.rm=T))
df_summary_pop <- df_input %>% group_by(month) %>% summarise(OC_population=n())
df_summary <- left_join(df_summary,df_summary_pop,id="month")
df_summary_long <- df_summary %>% pivot_longer(cols=starts_with("OC"),
names_to="Code",
values_to="Count") %>% filter(Code %!in% c("OC_population"))
df_summary_long$Count <- redactor(df_summary_long$Count,threshold =6,e_overwrite=NA_integer_)
write.csv(df_summary_long,paste0(here::here("output","tables"),"/sc03_tb01_nattrends.csv"))
df_summary_long$month <- as.Date(df_summary_long$month)
ggplot(data=df_summary_long,aes(x=month,y=Count,fill=Code)) +
geom_bar(stat="identity") +
facet_wrap(~Code,nrow=2,scales="free_y") +
scale_x_date(date_breaks = "2 months",expand=c(0,0))  +
theme(axis.text.x = element_text(angle = -90,vjust = 0))
# create directory for saving plots, if not existent
if (!dir.exists(here::here("output", "plots"))){
dir.create(here::here("output", "plots"))
}
# create directory for saving plots, if not existent
if (!dir.exists(here::here("output", "tables"))){
dir.create(here::here("output", "tables"))
}
## library
library(tidyverse)
library(here)
library(svglite)
`%!in%` = Negate(`%in%`)
query_dates=seq(as.Date("2019-01-01"),length=24,by="months")
query_dates <- paste0(query_dates)
## Redactor code (W.Hulme)
redactor <- function(n, threshold,e_overwrite=NA_integer_){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, e_overwrite, n)
}
df_input <- read_csv(
here::here("output","measures",paste0("input_measures_bycode_",  query_dates[1], ".csv")))
df_input <- df_input %>% mutate(month=query_dates[1])
for (datenow in tail(query_dates,-1)){
df_input_now <- read_csv(
here::here("output","measures",paste0("input_measures_bycode_",  datenow, ".csv")))
df_input_now <- df_input_now %>% mutate(month=datenow)
df_input <- df_input %>% bind_rows(df_input_now)
}
df_input <- as.data.frame(df_input)
df_input <- df_input %>% rename(OC_gp_consult_count=gp_consult_count)
rm(df_input_now)
df_summary <- df_input %>%
group_by(month) %>%
summarise_at(vars(starts_with("OC")),~sum(.,na.rm=T))
df_summary_pop <- df_input %>% group_by(month) %>% summarise(OC_population=n())
df_summary <- left_join(df_summary,df_summary_pop,id="month")
rm(df_summary_pop)
## Calculations for practice coverage
df_practice_flags <- df_input %>% group_by(region,stp,practice) %>% summarise_at(vars(starts_with("OC")),~ifelse(sum(.,na.rm=T)>0,1,0))
tbx_practice_flags_ <- pivot_longer(df_practice_flags,cols=starts_with("OC"),
names_to="code",
values_to="had_instance")
tbx_practice_flags_reg <- tbx_practice_flags_ %>%
group_by(region,code) %>%
summarise(Present=sum(had_instance),Absent=n()-Present) %>%
pivot_longer(c("Present","Absent"),names_to="Instance presence",values_to="no_practices") %>%
mutate(code=substr(code,4,nchar(code)))
# create directory for saving plots, if not existent
if (!dir.exists(here::here("output", "plots"))){
dir.create(here::here("output", "plots"))
}
# create directory for saving plots, if not existent
if (!dir.exists(here::here("output", "tables"))){
dir.create(here::here("output", "tables"))
}
## library
library(tidyverse)
library(here)
library(svglite)
`%!in%` = Negate(`%in%`)
query_dates=seq(as.Date("2019-01-01"),length=24,by="months")
query_dates <- paste0(query_dates)
## Redactor code (W.Hulme)
redactor <- function(n, threshold,e_overwrite=NA_integer_){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, e_overwrite, n)
}
df_input <- read_csv(
here::here("output","measures",paste0("input_measures_bycode_",  query_dates[1], ".csv")))
df_input <- df_input %>% mutate(month=query_dates[1])
for (datenow in tail(query_dates,-1)){
df_input_now <- read_csv(
here::here("output","measures",paste0("input_measures_bycode_",  datenow, ".csv")))
df_input_now <- df_input_now %>% mutate(month=datenow)
df_input <- df_input %>% bind_rows(df_input_now)
}
df_input <- as.data.frame(df_input)
df_input <- df_input %>% rename(OC_gp_consult_count=gp_consult_count)
rm(df_input_now)
df_summary <- df_input %>%
group_by(month) %>%
summarise_at(vars(starts_with("OC")),~sum(.,na.rm=T))
df_summary_pop <- df_input %>% group_by(month) %>% summarise(OC_population=n())
df_summary <- left_join(df_summary,df_summary_pop,id="month")
rm(df_summary_pop)
## Calculations for practice coverage
df_practice_flags <- df_input %>% group_by(region,stp,practice) %>% summarise_at(vars(starts_with("OC")),~ifelse(sum(.,na.rm=T)>0,1,0))
