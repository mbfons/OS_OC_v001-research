"September median: ",
round(data_idr %>% filter(date=="2020-09-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-09-01") %>% .$IDR ,1),"), ",
"December median: ",
round(data_idr %>% filter(date=="2020-12-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-12-01") %>% .$IDR ,1),")\n",
str_medidrnarrative(data_idr)
)
)+
theme_bw()+
theme(
panel.border = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.text.x = element_text(angle = 70, vjust = 1, hjust=1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.line.y = element_blank(),
plot.caption = element_text(color = "green", size=12)
)
}
)
)
## plot the charts (by variable)
measures_plots %>%
transmute(
plot = plot_by,
units = "cm",
height = 10,
width = 15,
limitsize=FALSE,
filename = str_c("plot_each_", id, ".svg"),
path = here::here("output", "plots"),
) %>%
pwalk(ggsave)
## plot the charts (by quantile)
measures_plots %>%
transmute(
plot = plot_quantiles2,
units = "cm",
height = 10,
width = 15,
limitsize=FALSE,
filename = str_c("plot_quantiles_", id, ".svg"),
path = here::here("output", "plots"),
) %>%
pwalk(ggsave)
## close log connection
sink()
data_quantiles %>% mutate(value_1000 = value*1000) %>%
ggplot()+
geom_line(aes(x=date, y=value_1000, group=value_q, linetype=value_q==0.5, size=value_q==0.5), colour='blue')+
scale_linetype_manual(breaks=c(TRUE,FALSE), values=c("solid", "dashed"), guide=FALSE,labels=c("median","decile"))+
scale_size_manual(breaks=c(TRUE, FALSE), values=c(1, 0.5), guide=FALSE)+
scale_x_date(date_breaks = "1 month", labels = scales::date_format("%Y-%m"))+
labs(
x=NULL,
y="rate per 1,000",
linetype="metric",
title=glue::glue("{measure_label}"),
subtitle = paste0(
"Practices included: ",
no_prac, " (",round(no_prac/no_prac_univ*100,1),"%)",
"; 2020 events: ",
paste0(round(no_2020_events/1000,1),"k"),
"; 2020 patients: ",
"TBA"
),
caption=paste0("Feb median: ",
round(data_idr %>% filter(date=="2020-02-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-02-01") %>% .$IDR ,1),"), ",
"April median: ",
round(data_idr %>% filter(date=="2020-04-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-04-01") %>% .$IDR ,1),"), ",
"September median: ",
round(data_idr %>% filter(date=="2020-09-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-09-01") %>% .$IDR ,1),"), ",
"December median: ",
round(data_idr %>% filter(date=="2020-12-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-12-01") %>% .$IDR ,1),")\n",
str_medidrnarrative(data_idr)
)
)+
theme_bw()+
theme(
panel.border = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.text.x = element_text(angle = 70, vjust = 1, hjust=1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.line.y = element_blank(),
plot.caption = element_text(color = "gray64", size=7)
)
## generate plots for each measure within the data frame
measures_plots <- measures %>%
mutate(
data_quantiles = map(data, ~ (.) %>% group_by(date) %>% summarise(quibble(value, seq(0,1,0.1)),v_idr(value),v_median(value))),
#data_median = map(data_quantiles, ~ (.) %>% group_by(date) %>% filter(value_q==0.5) %>% transmute(median=value)),
data_idr = map(data, ~ (.) %>% group_by(date) %>% summarise(v_idr(value*1000),v_median(value*1000))),
plot_by = pmap(lst( group_by, data, measure_label, by_label),
function(group_by, data, measure_label, by_label){
data %>% mutate(value_1000 = value*1000) %>%
ggplot()+
geom_line(aes_string(x="date", y="value_1000", group=group_by), alpha=0.2, colour='blue', size=0.25)+
scale_x_date(date_breaks = "1 month", labels = scales::date_format("%Y-%m"))+
labs(
x=NULL, y=NULL,
title=glue::glue("{measure_label} measurement"),
subtitle =  glue::glue("{by_label}, per 10,000 patients")
)+
theme_bw()+
theme(
panel.border = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.text.x = element_text(angle = 70, vjust = 1, hjust=1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
)
}
),
plot_quantiles = pmap(lst( group_by, data_quantiles, measure_label, by_label),
function(group_by, data_quantiles, measure_label, by_label){
data_quantiles %>% mutate(value_1000 = value*1000) %>%
ggplot()+
geom_line(aes(x=date, y=value_1000, group=value_q, linetype=value_q==0.5, size=value_q==0.5), colour='blue')+
scale_linetype_manual(breaks=c(TRUE, FALSE), values=c("solid", "dotted"), guide=FALSE)+
scale_size_manual(breaks=c(TRUE, FALSE), values=c(1, 0.4), guide=FALSE)+
scale_x_date(date_breaks = "1 month", labels = scales::date_format("%Y-%m"))+
labs(
x=NULL, y=NULL,
title=glue::glue("{measure_label} instances per 1000 patients"),
subtitle = glue::glue("quantiles {by_label}")
)+
theme_bw()+
theme(
panel.border = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.text.x = element_text(angle = 70, vjust = 1, hjust=1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
#axis.line.y = element_blank(),
)
}
),
plot_quantiles2 = pmap(lst( group_by, data_quantiles, measure_label, by_label,data_idr,no_2020_events,no_prac,no_prac_univ),
function(group_by, data_quantiles, measure_label, by_label,data_idr,no_2020_events,no_prac,no_prac_univ){
data_quantiles %>% mutate(value_1000 = value*1000) %>%
ggplot()+
geom_line(aes(x=date, y=value_1000, group=value_q, linetype=value_q==0.5, size=value_q==0.5), colour='blue')+
scale_linetype_manual(breaks=c(TRUE,FALSE), values=c("solid", "dashed"), guide=FALSE,labels=c("median","decile"))+
scale_size_manual(breaks=c(TRUE, FALSE), values=c(1, 0.5), guide=FALSE)+
scale_x_date(date_breaks = "1 month", labels = scales::date_format("%Y-%m"))+
labs(
x=NULL,
y="rate per 1,000",
linetype="metric",
title=glue::glue("{measure_label}"),
subtitle = paste0(
"Practices included: ",
no_prac, " (",round(no_prac/no_prac_univ*100,1),"%)",
"; 2020 events: ",
paste0(round(no_2020_events/1000,1),"k"),
"; 2020 patients: ",
"TBA"
),
caption=paste0("Feb median: ",
round(data_idr %>% filter(date=="2020-02-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-02-01") %>% .$IDR ,1),"), ",
"April median: ",
round(data_idr %>% filter(date=="2020-04-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-04-01") %>% .$IDR ,1),"), ",
"September median: ",
round(data_idr %>% filter(date=="2020-09-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-09-01") %>% .$IDR ,1),"), ",
"December median: ",
round(data_idr %>% filter(date=="2020-12-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-12-01") %>% .$IDR ,1),")\n",
str_medidrnarrative(data_idr)
)
)+
theme_bw()+
theme(
panel.border = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.text.x = element_text(angle = 70, vjust = 1, hjust=1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.line.y = element_blank(),
plot.caption = element_text(color = "gray64", size=7)
)
}
)
)
## plot the charts (by variable)
measures_plots %>%
transmute(
plot = plot_by,
units = "cm",
height = 10,
width = 15,
limitsize=FALSE,
filename = str_c("plot_each_", id, ".svg"),
path = here::here("output", "plots"),
) %>%
pwalk(ggsave)
## plot the charts (by quantile)
measures_plots %>%
transmute(
plot = plot_quantiles2,
units = "cm",
height = 10,
width = 15,
limitsize=FALSE,
filename = str_c("plot_quantiles_", id, ".svg"),
path = here::here("output", "plots"),
) %>%
pwalk(ggsave)
## close log connection
sink()
## generate plots for each measure within the data frame
measures_plots <- measures %>%
mutate(
data_quantiles = map(data, ~ (.) %>% group_by(date) %>% summarise(quibble(value, seq(0,1,0.1)),v_idr(value),v_median(value))),
#data_median = map(data_quantiles, ~ (.) %>% group_by(date) %>% filter(value_q==0.5) %>% transmute(median=value)),
data_idr = map(data, ~ (.) %>% group_by(date) %>% summarise(v_idr(value*1000),v_median(value*1000))),
plot_by = pmap(lst( group_by, data, measure_label, by_label),
function(group_by, data, measure_label, by_label){
data %>% mutate(value_1000 = value*1000) %>%
ggplot()+
geom_line(aes_string(x="date", y="value_1000", group=group_by), alpha=0.2, colour='blue', size=0.25)+
scale_x_date(date_breaks = "1 month", labels = scales::date_format("%Y-%m"))+
labs(
x=NULL, y=NULL,
title=glue::glue("{measure_label} measurement"),
subtitle =  glue::glue("{by_label}, per 10,000 patients")
)+
theme_bw()+
theme(
panel.border = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.text.x = element_text(angle = 70, vjust = 1, hjust=1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
)
}
),
plot_quantiles = pmap(lst( group_by, data_quantiles, measure_label, by_label),
function(group_by, data_quantiles, measure_label, by_label){
data_quantiles %>% mutate(value_1000 = value*1000) %>%
ggplot()+
geom_line(aes(x=date, y=value_1000, group=value_q, linetype=value_q==0.5, size=value_q==0.5), colour='blue')+
scale_linetype_manual(breaks=c(TRUE, FALSE), values=c("solid", "dotted"), guide=FALSE)+
scale_size_manual(breaks=c(TRUE, FALSE), values=c(1, 0.4), guide=FALSE)+
scale_x_date(date_breaks = "1 month", labels = scales::date_format("%Y-%m"))+
labs(
x=NULL, y=NULL,
title=glue::glue("{measure_label} instances per 1000 patients"),
subtitle = glue::glue("quantiles {by_label}")
)+
theme_bw()+
theme(
panel.border = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.text.x = element_text(angle = 70, vjust = 1, hjust=1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
#axis.line.y = element_blank(),
)
}
),
plot_quantiles2 = pmap(lst( group_by, data_quantiles, measure_label, by_label,data_idr,no_2020_events,no_prac,no_prac_univ),
function(group_by, data_quantiles, measure_label, by_label,data_idr,no_2020_events,no_prac,no_prac_univ){
data_quantiles %>% mutate(value_1000 = value*1000) %>%
ggplot()+
geom_line(aes(x=date, y=value_1000, group=value_q, linetype=value_q==0.5, size=value_q==0.5), colour='blue')+
scale_linetype_manual(breaks=c(TRUE,FALSE), values=c("solid", "dashed"), guide=FALSE,labels=c("median","decile"))+
scale_size_manual(breaks=c(TRUE, FALSE), values=c(1, 0.5), guide=FALSE)+
scale_x_date(date_breaks = "1 month", labels = scales::date_format("%Y-%m"))+
labs(
x=NULL,
y="rate per 1,000",
linetype="metric",
title=glue::glue("{measure_label}"),
subtitle = paste0(
"Practices included: ",
no_prac, " (",round(no_prac/no_prac_univ*100,1),"%)",
"; 2020 events: ",
paste0(round(no_2020_events/1000,1),"k"),
"; 2020 patients: ",
"TBA"
),
caption=paste0("Feb median: ",
round(data_idr %>% filter(date=="2020-02-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-02-01") %>% .$IDR ,1),"), ",
"April median: ",
round(data_idr %>% filter(date=="2020-04-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-04-01") %>% .$IDR ,1),"),\n ",
"September median: ",
round(data_idr %>% filter(date=="2020-09-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-09-01") %>% .$IDR ,1),"), ",
"December median: ",
round(data_idr %>% filter(date=="2020-12-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-12-01") %>% .$IDR ,1),")\n",
str_medidrnarrative(data_idr)
)
)+
theme_bw()+
theme(
panel.border = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.text.x = element_text(angle = 70, vjust = 1, hjust=1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.line.y = element_blank(),
plot.caption = element_text(color = "gray64", size=7)
)
}
)
)
## plot the charts (by variable)
measures_plots %>%
transmute(
plot = plot_by,
units = "cm",
height = 10,
width = 15,
limitsize=FALSE,
filename = str_c("plot_each_", id, ".svg"),
path = here::here("output", "plots"),
) %>%
pwalk(ggsave)
## plot the charts (by quantile)
measures_plots %>%
transmute(
plot = plot_quantiles2,
units = "cm",
height = 10,
width = 15,
limitsize=FALSE,
filename = str_c("plot_quantiles_", id, ".svg"),
path = here::here("output", "plots"),
) %>%
pwalk(ggsave)
## close log connection
sink()
## Redactor code (W.Hulme)
redactor <- function(n, threshold,e_overwrite=NA_integer_){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, e_overwrite, n)
}
## Redactor code (W.Hulme)
redactor <- function(n, threshold,e_overwrite=NA_integer_){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, e_overwrite, n)
}
View(measures$data[[1]])
aux<-measures$data[[1]]
aux[2,]<-redacted(aux[2,])
## Redactor code (W.Hulme)
redactor <- function(n, threshold,e_overwrite=NA_integer_){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, e_overwrite, n)
}
aux[2,]<-redactor(aux[2,])
## Redactor code (W.Hulme)
redactor <- function(n, threshold=6,e_overwrite=NA_integer_){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, e_overwrite, n)
}
aux[2,]<-redactor(aux[2,])
aux[,2]<-redactor(aux[,2])
a<-aux[,2]
View(s)
View(a)
aux$gp_consult_count<-redactor(aux$gp_consult_count)
a <- a %>% mutate_at(vars(measure_col),redactor)
measure_col="gp_consult_count"
a <- a %>% mutate_at(vars(measure_col),redactor)
View(a)
a <- a %>% mutate_at(vars(measure_col),~redactor(.,500))
a<-aux[,2]
a <- a %>% mutate_at(vars(measure_col),~redactor(.,500))
a<-aux[,2]
a <- a %>% mutate_at(vars(measure_col),redactor)
aux<-measures$data[[1]]
aux2 <- aux2 %>% mutate_at(vars(measure_col),redactor)
View(aux)
aux2 <- aux %>% mutate_at(vars(measure_col),redactor)
aux2 <- aux %>% mutate_at(vars(measure_col),~redactor(.,500))
View(aux2)
aux %>% select_vars(measure_col)
aux %>% select(measure_col)
# create look-up table to iterate over
md_tbl <- tibble(
measure = c("gpc", "OC_Y1f3b", "OC_XUkjp", "OC_XaXcK","OC_XVCTw","OC_XUuWQ","OC_XV1pT","OC_9N34d","OC_d9N34","OC_XUman","OC_Y22b4"),
measure_col=c("gp_consult_count", "OC_Y1f3b", "OC_XUkjp", "OC_XaXcK","OC_XVCTw","OC_XUuWQ","OC_XV1pT","OC_9N34d","OC_d9N34","OC_XUman","OC_Y22b4"),
measure_label = c("GPconsult", "Y1f3b", "XUkjp", "XaXcK","XVCTw","XUuWQ","XV1pT","9N34d","d9N34","XUman","Y22b4"),
by = rep("practice",1,11),
by_label = rep("by practice",1,11),
id = paste0(measure, "_", by),
numerator = measure,
denominator = "population",
group_by = rep("practice",1,11)
)
## import measures data from look-up
measures <- md_tbl %>%
mutate(
data = map(id, ~read_csv(here::here("output","measures", glue::glue("measure_{.}.csv")))),
)
p_saving <- function(id,data) {
write.csv(paste0(here::here("output","measures"),"/red_measure_",id,".csv"))
return(data)
}
# Create redacted measures and save
measures <- measures %>%
mutate(
redacted_data = pmap(lst(id,measure_col,data),
function(id,measure_col,data) {
redacted_data <- data %>% mutate_at(vars(measure_col),redactor)
write.csv(redacted_data,paste0(here::here("output","tables"),"/redacted_measure_",id,".csv"))
return(redacted_data)
}
)
)
aux<-measures$data[[1]]
aux %>% select(measure_col)
redacted_data <- aux%>% mutate_at(vars(measure_col),redactor)
redacted_data <- redacted_data %>% mutate_at(value=select(measure_col))
redacted_data <- redacted_data %>% mutate_at(value=select(vars(measure_col)))
redacted_data <- redacted_data %>% mutate(value=select(vars(measure_col)))
redacted_data <- redacted_data %>% mutate(value=select(measure_col))
View(redacted_data)
redacted_data$value <- ifelse(is.na(redacted_data[,2],NA,redacted_data$value))
redacted_data$value <- ifelse(is.na(redacted_data %>% select(measure_col),NA,redacted_data$value))
redacted_data$value <- ifelse(is.na(redacted_data %>% select(measure_col)),NA,redacted_data$value)
redacted_data <- aux%>% mutate_at(vars(measure_col),~redactor(.,500))
redacted_data$value <- ifelse(is.na(redacted_data %>% select(measure_col)),NA,redacted_data$value)
View(redacted_data)
# Create redacted measures and save
measures <- measures %>%
mutate(
redacted_data = pmap(lst(id,measure_col,data),
function(id,measure_col,data) {
redacted_data <- data %>% mutate_at(vars(measure_col),redactor)
redacted_data$value <- ifelse(is.na(redacted_data %>% select(measure_col)),NA,redacted_data$value)
write.csv(redacted_data,paste0(here::here("output","tables"),"/redacted_measure_",id,".csv"))
return(redacted_data)
}
)
)
paste0(here::here("output","tables"),"/sc03_tb01_nattrends.csv")
