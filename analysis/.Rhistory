## open log connection to file
sink(here::here("logs", "log-03-createnattrends.txt"))
## library
library(tidyverse)
library(here)
library(svglite)
`%!in%` = Negate(`%in%`)
query_dates=seq(as.Date("2019-01-01"),length=24,by="months")
query_dates <- paste0(query_dates)
## Redactor code (W.Hulme)
redactor <- function(n, threshold,e_overwrite=NA_integer_){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, e_overwrite, n)
}
df_input <- read_csv(
here::here("output","measures",paste0("input_measures_bycode_",  query_dates[1], ".csv")))
df_input <- df_input %>% mutate(month=query_dates[1])
for (datenow in tail(query_dates,-1)){
df_input_now <- read_csv(
here::here("output","measures",paste0("input_measures_bycode_",  datenow, ".csv")))
df_input_now <- df_input_now %>% mutate(month=datenow)
df_input <- df_input %>% bind_rows(df_input_now)
}
df_input <- as.data.frame(df_input)
df_input <- df_input %>% rename(OC_gp_consult_count=gp_consult_count)
rm(df_input_now)
View(df_input)
df_praccov <- df_input %>% group_by(region,stp,practice) %>% summarise_at(vars(starts_with("OC"),sum))
df_praccov <- df_input %>% group_by(region,stp,practice) %>% summarise_at(vars(starts_with("OC")),sum(.,na.rm=T))
df_praccov <- df_input %>% group_by(region,stp,practice) %>% summarise_at(vars(starts_with("OC")),~sum(.,na.rm=T))
View(df_praccov)
df_praccov <- df_input %>% group_by(region,stp,practice) %>% summarise_at(vars(starts_with("OC")),~ifelse(sum(.,na.rm=T)>0,1,0))
View(df_praccov)
## Calculations for practice coverage
df_practice_flags <- df_input %>% group_by(region,stp,practice) %>% summarise_at(vars(starts_with("OC")),~ifelse(sum(.,na.rm=T)>0,1,0))
tbx_practice_flags_ <- pivot_longer(df_practice_flags,cols=starts_with("OC"),
names_to="code",
values_to="had_instance")
View(tbx_practice_flags_)
substr("aaaaaaaa",4,)
"aaa"
a<-"aaa"
length(a)
aa<-length(a)
nchar("aaa")
aa<-nchar("aaa")
aa<-nchar("aaa")>3
aa<-nchar("aaa")<=3
tbx_practice_flags_ <- pivot_longer(df_practice_flags,cols=starts_with("OC"),
names_to="code",
values_to="had_instance")
tbx_practice_flags_ <- tbx_practice_flags_ %>%
group_by(code) %>%
summarise(Present=sum(had_instance),Absent=n()-Present) %>%
pivot_longer(c("Present","Absent"),names_to="Instance presence",values_to="no_practices") %>%
mutate(code=substr(code,4,nchar(code)))
tbx_practice_flags_$`Instance presence` <- factor(tbx_practice_flags_$`Instance presence`)
ggplot(tbx_practice_flags_, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(vjust=-1),position = position_stack(vjust = 0.2))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")
View(df_practice_flags)
tbx_practice_flags_ <- pivot_longer(df_practice_flags,cols=starts_with("OC"),
names_to="code",
values_to="had_instance")
tbx_practice_flags_ <- tbx_practice_flags_ %>%
group_by(region,code) %>%
summarise(Present=sum(had_instance),Absent=n()-Present) %>%
pivot_longer(c("Present","Absent"),names_to="Instance presence",values_to="no_practices") %>%
mutate(code=substr(code,4,nchar(code)))
View(tbx_practice_flags_)
ggplot(tbx_practice_flags_, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(vjust=-1),position = position_stack(vjust = 0.2))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")+facet_wrap(~region)
tbx_practice_flags_ <- tbx_practice_flags_ %>%
group_by(region,code) %>%
summarise(Present=sum(had_instance),Absent=n()-Present) %>%
pivot_longer(c("Present","Absent"),names_to="Instance presence",values_to="no_practices") %>%
mutate(code=substr(code,4,nchar(code)))
ggplot(tbx_practice_flags_, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(vjust=-1),position = position_stack(vjust = 0.2))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")
tbx_practice_flags_nat <- tbx_practice_flags_ %>%
group_by(region,code) %>%
summarise(Present=sum(had_instance),Absent=n()-Present) %>%
pivot_longer(c("Present","Absent"),names_to="Instance presence",values_to="no_practices") %>%
mutate(code=substr(code,4,nchar(code)))
tbx_practice_flags_ <- pivot_longer(df_practice_flags,cols=starts_with("OC"),
names_to="code",
values_to="had_instance")
tbx_practice_flags_nat <- tbx_practice_flags_ %>%
group_by(code) %>%
summarise(Present=sum(had_instance),Absent=n()-Present) %>%
pivot_longer(c("Present","Absent"),names_to="Instance presence",values_to="no_practices") %>%
mutate(code=substr(code,4,nchar(code)))
tbx_practice_flags_$`Instance presence` <- factor(tbx_practice_flags_$`Instance presence`)
tbx_practice_flags_nat$`Instance presence` <- factor(tbx_practice_flags_nat$`Instance presence`)
ggplot(tbx_practice_flags_nat, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(vjust=-1),position = position_stack(vjust = 0.2))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")
ggplot(tbx_practice_flags_reg, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(vjust=-1),position = position_stack(vjust = 0.2))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")+facet_wrap(~region)
tbx_practice_flags_reg <- tbx_practice_flags_ %>%
group_by(region,code) %>%
summarise(Present=sum(had_instance),Absent=n()-Present) %>%
pivot_longer(c("Present","Absent"),names_to="Instance presence",values_to="no_practices") %>%
mutate(code=substr(code,4,nchar(code)))
ggplot(tbx_practice_flags_reg, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(vjust=-1),position = position_stack(vjust = 0.2))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")+facet_wrap(~region)
rm(tbx_practice_flags_reg)
ggplot(tbx_practice_flags_, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(vjust=-1),position = position_stack(vjust = 0.2))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")
ggsave(paste0(here::here("output","plots"),"/sc03_fig03_pracnatcoverage.svg"),width = 40, height = 20, dpi=300,units ="cm")
tbx_practice_flags_ <- tbx_practice_flags_ %>%
group_by(code) %>%
summarise(Present=sum(had_instance),Absent=n()-Present) %>%
pivot_longer(c("Present","Absent"),names_to="Instance presence",values_to="no_practices") %>%
mutate(code=substr(code,4,nchar(code)))
tbx_practice_flags_$`Instance presence` <- factor(tbx_practice_flags_$`Instance presence`)
ggplot(tbx_practice_flags_, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(vjust=-1),position = position_stack(vjust = 0.2))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")
ggsave(paste0(here::here("output","plots"),"/sc03_fig03_pracnatcoverage.svg"),width = 40, height = 20, dpi=300,units ="cm")
ggplot(tbx_practice_flags_reg, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(vjust=-1),position = position_stack(vjust = 0.2))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")+facet_wrap(~region)
tbx_practice_flags_ <- pivot_longer(df_practice_flags,cols=starts_with("OC"),
names_to="code",
values_to="had_instance")
tbx_practice_flags_reg <- tbx_practice_flags_ %>%
group_by(region,code) %>%
summarise(Present=sum(had_instance),Absent=n()-Present) %>%
pivot_longer(c("Present","Absent"),names_to="Instance presence",values_to="no_practices") %>%
mutate(code=substr(code,4,nchar(code)))
ggplot(tbx_practice_flags_reg, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(vjust=-1),position = position_stack(vjust = 0.2))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")+facet_wrap(~region)
ggsave(paste0(here::here("output","plots"),"/sc03_fig03_pracbyregcoverage.svg"),width = 40, height = 20, dpi=300,units ="cm")
ggplot(tbx_practice_flags_reg, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(vjust=-1),position = position_stack(vjust = 0.0))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")+facet_wrap(~region)
ggsave(paste0(here::here("output","plots"),"/sc03_fig03_pracbyregcoverage.svg"),width = 40, height = 20, dpi=300,units ="cm")
tbx_practice_flags_nat$code %>% unique
a<- tbx_practice_flags_nat$code %>% unique
df_summary_long <- df_summary %>% pivot_longer(cols=starts_with("OC"),
names_to="Code",
values_to="Count") %>% filter(Code %!in% c("OC_population"))
df_summary <- df_input %>%
group_by(month) %>%
summarise_at(vars(starts_with("OC")),~sum(.,na.rm=T))
df_summary_pop <- df_input %>% group_by(month) %>% summarise(OC_population=n())
df_summary <- left_join(df_summary,df_summary_pop,id="month")
df_summary_long <- df_summary %>% pivot_longer(cols=starts_with("OC"),
names_to="Code",
values_to="Count") %>% filter(Code %!in% c("OC_population"))
df_summary_long$Count <- redactor(df_summary_long$Count,threshold =6,e_overwrite=NA_integer_)
write.csv(df_summary_long,paste0(here::here("output","tables"),"/sc03_tb01_nattrends.csv"))
df_summary_long$month <- as.Date(df_summary_long$month)
ggplot(data=df_summary_long,aes(x=month,y=Count,fill=Code)) +
geom_bar(stat="identity") +
facet_wrap(~Code,nrow=2,scales="free_y") +
scale_x_date(date_breaks = "2 months",expand=c(0,0))  +
theme(axis.text.x = element_text(angle = -90,vjust = 0))
# create directory for saving plots, if not existent
if (!dir.exists(here::here("output", "plots"))){
dir.create(here::here("output", "plots"))
}
# create directory for saving plots, if not existent
if (!dir.exists(here::here("output", "tables"))){
dir.create(here::here("output", "tables"))
}
## library
library(tidyverse)
library(here)
library(svglite)
`%!in%` = Negate(`%in%`)
query_dates=seq(as.Date("2019-01-01"),length=24,by="months")
query_dates <- paste0(query_dates)
## Redactor code (W.Hulme)
redactor <- function(n, threshold,e_overwrite=NA_integer_){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, e_overwrite, n)
}
df_input <- read_csv(
here::here("output","measures",paste0("input_measures_bycode_",  query_dates[1], ".csv")))
df_input <- df_input %>% mutate(month=query_dates[1])
for (datenow in tail(query_dates,-1)){
df_input_now <- read_csv(
here::here("output","measures",paste0("input_measures_bycode_",  datenow, ".csv")))
df_input_now <- df_input_now %>% mutate(month=datenow)
df_input <- df_input %>% bind_rows(df_input_now)
}
df_input <- as.data.frame(df_input)
df_input <- df_input %>% rename(OC_gp_consult_count=gp_consult_count)
rm(df_input_now)
df_summary <- df_input %>%
group_by(month) %>%
summarise_at(vars(starts_with("OC")),~sum(.,na.rm=T))
df_summary_pop <- df_input %>% group_by(month) %>% summarise(OC_population=n())
df_summary <- left_join(df_summary,df_summary_pop,id="month")
rm(df_summary_pop)
## Calculations for practice coverage
df_practice_flags <- df_input %>% group_by(region,stp,practice) %>% summarise_at(vars(starts_with("OC")),~ifelse(sum(.,na.rm=T)>0,1,0))
tbx_practice_flags_ <- pivot_longer(df_practice_flags,cols=starts_with("OC"),
names_to="code",
values_to="had_instance")
tbx_practice_flags_reg <- tbx_practice_flags_ %>%
group_by(region,code) %>%
summarise(Present=sum(had_instance),Absent=n()-Present) %>%
pivot_longer(c("Present","Absent"),names_to="Instance presence",values_to="no_practices") %>%
mutate(code=substr(code,4,nchar(code)))
# create directory for saving plots, if not existent
if (!dir.exists(here::here("output", "plots"))){
dir.create(here::here("output", "plots"))
}
# create directory for saving plots, if not existent
if (!dir.exists(here::here("output", "tables"))){
dir.create(here::here("output", "tables"))
}
## library
library(tidyverse)
library(here)
library(svglite)
`%!in%` = Negate(`%in%`)
query_dates=seq(as.Date("2019-01-01"),length=24,by="months")
query_dates <- paste0(query_dates)
## Redactor code (W.Hulme)
redactor <- function(n, threshold,e_overwrite=NA_integer_){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, e_overwrite, n)
}
df_input <- read_csv(
here::here("output","measures",paste0("input_measures_bycode_",  query_dates[1], ".csv")))
df_input <- df_input %>% mutate(month=query_dates[1])
for (datenow in tail(query_dates,-1)){
df_input_now <- read_csv(
here::here("output","measures",paste0("input_measures_bycode_",  datenow, ".csv")))
df_input_now <- df_input_now %>% mutate(month=datenow)
df_input <- df_input %>% bind_rows(df_input_now)
}
df_input <- as.data.frame(df_input)
df_input <- df_input %>% rename(OC_gp_consult_count=gp_consult_count)
rm(df_input_now)
df_summary <- df_input %>%
group_by(month) %>%
summarise_at(vars(starts_with("OC")),~sum(.,na.rm=T))
df_summary_pop <- df_input %>% group_by(month) %>% summarise(OC_population=n())
df_summary <- left_join(df_summary,df_summary_pop,id="month")
rm(df_summary_pop)
## Calculations for practice coverage
df_practice_flags <- df_input %>% group_by(region,stp,practice) %>% summarise_at(vars(starts_with("OC")),~ifelse(sum(.,na.rm=T)>0,1,0))
## open log connection to file
sink(here::here("logs", "log-03-createnattrends.txt"))
# create directory for saving plots, if not existent
if (!dir.exists(here::here("output", "plots"))){
dir.create(here::here("output", "plots"))
}
# create directory for saving plots, if not existent
if (!dir.exists(here::here("output", "tables"))){
dir.create(here::here("output", "tables"))
}
## library
library(tidyverse)
library(here)
library(svglite)
`%!in%` = Negate(`%in%`)
query_dates=seq(as.Date("2019-01-01"),length=24,by="months")
query_dates <- paste0(query_dates)
## Redactor code (W.Hulme)
redactor <- function(n, threshold,e_overwrite=NA_integer_){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, e_overwrite, n)
}
df_input <- read_csv(
here::here("output","measures",paste0("input_measures_bycode_",  query_dates[1], ".csv")))
df_input <- df_input %>% mutate(month=query_dates[1])
for (datenow in tail(query_dates,-1)){
df_input_now <- read_csv(
here::here("output","measures",paste0("input_measures_bycode_",  datenow, ".csv")))
df_input_now <- df_input_now %>% mutate(month=datenow)
df_input <- df_input %>% bind_rows(df_input_now)
}
df_input <- as.data.frame(df_input)
df_input <- df_input %>% rename(snomedc_gp_consult_count=gp_consult_count)
rm(df_input_now)
myprefix="snomed"
df_summary <- df_input %>%
group_by(month) %>%
summarise_at(vars(starts_with(myprefix)),~sum(.,na.rm=T))
df_summary_pop <- df_input %>% group_by(month) %>% summarise(OC_population=n_distinct(patient_id))
df_summary <- left_join(df_summary,df_summary_pop,id="month")
rm(df_summary_pop)
## Calculations for practice coverage
df_practice_flags <- df_input %>% group_by(region,stp,practice) %>% summarise_at(vars(starts_with(myprefix)),~ifelse(sum(.,na.rm=T)>0,1,0))
tbx_practice_flags_ <- pivot_longer(df_practice_flags,cols=starts_with(myprefix),
names_to="code",
values_to="had_instance")
tbx_practice_flags_reg <- tbx_practice_flags_ %>%
group_by(region,code) %>%
summarise(Present=sum(had_instance),Absent=n()-Present) %>%
pivot_longer(c("Present","Absent"),names_to="Instance presence",values_to="no_practices") %>%
mutate(code=substr(code,nchar(myprefix)+2,nchar(code)))
tbx_practice_flags_ <- tbx_practice_flags_ %>%
group_by(code) %>%
summarise(Present=sum(had_instance),Absent=n()-Present) %>%
pivot_longer(c("Present","Absent"),names_to="Instance presence",values_to="no_practices") %>%
mutate(code=substr(code,nchar(myprefix)+2,nchar(code)))
tbx_practice_flags_$`Instance presence` <- factor(tbx_practice_flags_$`Instance presence`)
ggplot(tbx_practice_flags_, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(vjust=0),position = position_stack(vjust = 0.2))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")+
coord_flip()
ggplot(tbx_practice_flags_reg, aes(fill=`Instance presence`,x=code, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(hjust=-1),position = position_stack(vjust = 0.0))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")+facet_wrap(~region)+
coord_flip()
ggsave(paste0(here::here("output","plots"),"/sc03_fig04_pracbyregcoverage.svg"),width = 30, height = 30, dpi=300,units ="cm")
rm(df_input)
rm(df_practice_flags)
rm(tbx_practice_flags_)
rm(tbx_practice_flags_reg)
df_summary_long <- df_summary %>% pivot_longer(cols=starts_with(myprefix),
names_to="Code",
values_to="Count")
View(df_summary_long)
flag_gtsummaryoperational = TRUE
## library
library(tidyverse)
if (flag_gtsummaryoperational){
library(gtsummary)
}
library(gt)
library(here)
# create directory for saving tables, if not existent
if (!dir.exists(here::here("output", "tables"))){
dir.create(here::here("output", "tables"))
}
## import and pre-process cohort data
df_input <- read_csv(
here::here("output", "input_ori.csv"))
df_cleaned <- df_input %>%
mutate(age_group = factor(cut(age,breaks = c(0,18,40,50,60,70,80, Inf),dig.lab = 2)),
sex = factor(case_when(sex=="F" ~ "Female",sex=="M" ~ "Male",TRUE ~ "Other/Unknown")),
ethnicity = factor(case_when(ethnicity==1 ~ "White",ethnicity==2 ~ "Mixed",ethnicity==3 ~ "Asian",ethnicity==4 ~ "Black",ethnicity==5 ~ "Other",TRUE~"Other")),
care_home_type=factor(case_when(care_home_type=="PC" ~ "Care home",care_home_type=="PN" ~ "Care home",care_home_type=="PS" ~ "Care home",TRUE ~ "Non")),
gp_consult_had = ifelse(is.na(gp_consult_count)|gp_consult_count==0,0,1),
OC_instance=OC_instance_snomed, # setting snomed as the relevant one
oc_instance_had = ifelse(is.na(OC_instance)|OC_instance==0,0,1),
livingalone = ifelse(hh_size<=1,1,0),
has_disability = ifelse(is.na(has_disability),0,has_disability),
imd_quin=ifelse(is.na(imd)|imd=="U",NA,imd),
rural_urban=factor(case_when(rural_urban %in% c(1,2,3,4)~"Urban",rural_urban %in% c(5,6,7,8)~"Rural",TRUE~"Other"))
)
if (flag_gtsummaryoperational){
## Characteristics of those with any OC consultation, any GP consultation and overall population
desc_vars=c("sex","age","age_group","ethnicity","livingalone","region","imd_quin","rural_urban","care_home_type","oc_instance_had")
(gt_ocpop <- df_cleaned %>% select(desc_vars) %>% tbl_summary(by=oc_instance_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Characteristic | had OC**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had any OC instance**"))
desc_vars2=c("sex","age","age_group","ethnicity","livingalone","region","imd_quin","rural_urban","care_home_type","gp_consult_had")
(gt_gpcpop <- df_cleaned %>% select(desc_vars2) %>% tbl_summary(by=gp_consult_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Characteristic | had GP consultation**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had any GP consultation**"))
# Use function from gt package to save table as neat png
#gt::gtsave(as_gt(gt_ocpop), file = file.path(here::here("output","tables"), "gt_ocpop.png"))
#gt::gtsave(as_gt(gt_gpcpop), file = file.path(here::here("output","tables"), "gt_gpcpop.png"))
# steps to remove input data and strip further where possible
gt_gpcpop$inputs <- NULL
gt_gpcpop$call_list <- NULL
gt_gpcpop$meta_data <- NULL
gt_ocpop$inputs <- NULL
gt_ocpop$call_list <- NULL
gt_ocpop$meta_data <- NULL
# Save dta with actual table data, but underlying data removed
save(gt_ocpop,file = file.path(here::here("output","tables"), "gt_ocpop.RData"))
save(gt_gpcpop,file = file.path(here::here("output","tables"), "gt_gpcpop.RData"))
# Save unformatted for disclosiveness assessment
aux<-as.data.frame(gt_ocpop$table_body); aux <- apply(aux,2,as.character)
write.csv(aux,paste0(here::here("output","tables"),"/gt_ocpop_unformatted.csv"))
aux<-as.data.frame(gt_gpcpop$table_body);aux <- apply(aux,2,as.character)
write.csv(aux,paste0(here::here("output","tables"),"/gt_gpcpop_unformatted.csv"))
}
## Redactor code (W.Hulme)
redactor <- function(n, threshold){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, NA_integer_, n)
}
## Rates per characteristic
df_to_tbrates <- function(mydf,myvars,flag_save=0,tb_name="latest",n_redact=6) {
mytb=
mydf %>%
group_by_at(myvars) %>%
summarise(
population=n(),
gp_consult=sum(gp_consult_count,na.rm=T),
gp_consult_covg = sum(gp_consult_had,na.rm=T),
oc_instance=sum(OC_instance,na.rm=T),
oc_instance_covg=sum(oc_instance_had,na.rm=T),
) %>%
mutate(
gp_consult=redactor(gp_consult,n_redact),
gp_consult_covg = redactor(gp_consult_covg,n_redact),
oc_instance=redactor(oc_instance,n_redact),
oc_instance_covg=redactor(oc_instance_covg,n_redact),
gp_consult_rate=gp_consult/population,
gp_consult_covg_rate=gp_consult_covg/population,
oc_instance_rate=oc_instance/population,
oc_instance_covg_rate=oc_instance_covg/population
)
if (flag_save){
write.csv(mytb,paste0(here::here("output","tables"),"/",tb_name,".csv"))
}
return(mytb)
}
## OC and GP rates per age and gender
tb04_gpcr_agesex <- df_to_tbrates(df_cleaned,c("age_group","sex"),1,"tb04_gpcr_agesex")
## OC and GP rates by ethnicity
tb05_gpcr_ethnicity <- df_to_tbrates(df_cleaned,c("ethnicity"),1,"tb05_gpcr_ethnicity")
## OC and GP rates by region and rurality
tb06_gpcr_ruc <- df_to_tbrates(df_cleaned,c("region","rural_urban"),1,"tb06_gpcr_ruc")
## OC and GP rates by care home status
tb07_gpcr_care <- df_to_tbrates(df_cleaned,c("care_home_type"),1,"tb07_gpcr_care")
## OC and GP rates by presence of disability
tb08_gpcr_dis <- df_to_tbrates(df_cleaned,c("has_disability"),1,"tb08_gpcr_dis")
## OC and GP rates by presence of disability
tb09_gpcr_imd <- df_to_tbrates(df_cleaned,c("imd_quin"),1,"tb09_gpcr_imd")
## close log connection
sink()
