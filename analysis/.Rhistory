View(gt_ocpop)
(gt_ocpop <- df_cleaned %>% select(desc_vars) %>% tbl_summary(by=oc_instance_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Characteristic | had OC**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had any OC instance**"))
## open log connection to file
sink(here::here("logs", "log-05-createClinicalConditiontables.txt"))
flag_gtsummaryoperational = TRUE
## library
library(tidyverse)
if (flag_gtsummaryoperational){
library(gtsummary)
}
library(gt)
library(here)
library(webshot)
# create directory for saving tables, if not existent
if (!dir.exists(here::here("output", "tables"))){
dir.create(here::here("output", "tables"))
}
## import and pre-process cohort data
df_input <- read_csv(
here::here("output", "input_v2.csv"))
df_cleaned <- df_input %>%
mutate(age_group = factor(cut(age,breaks = c(0,18,40,50,60,70,80, Inf),dig.lab = 2)),
sex = factor(case_when(sex=="F" ~ "Female",sex=="M" ~ "Male",TRUE ~ "Other/Unknown")),
ethnicity = factor(case_when(ethnicity==1 ~ "White",ethnicity==2 ~ "Mixed",ethnicity==3 ~ "Asian",ethnicity==4 ~ "Black",ethnicity==5 ~ "Other",TRUE~"Other")),
care_home_type=factor(case_when(care_home_type=="PC" ~ "Care home",care_home_type=="PN" ~ "Care home",care_home_type=="PS" ~ "Care home",TRUE ~ "Non")),
gp_consult_pre_had = ifelse(is.na(gp_consult_pre_count)|gp_consult_pre_count==0,0,1),
gp_consult_post_had = ifelse(is.na(gp_consult_post_count)|gp_consult_post_count==0,0,1),
econsult_pre_had = ifelse(is.na(econsult_pre_had)|econsult_pre_had==0,0,1),
econsult_post_had = ifelse(is.na(econsult_post_had)|econsult_post_had==0,0,1),
livingalone = ifelse(hh_size<=1,1,0),
imd_quin=ifelse(is.na(imd)|imd=="U",NA,imd),
rural_urban=factor(case_when(rural_urban %in% c(1,2,3,4)~"Urban",rural_urban %in% c(5,6,7,8)~"Rural",TRUE~"Other"))
)
df_cleaned <- df_input %>%
mutate(age_group = factor(cut(age,breaks = c(0,18,40,50,60,70,80, Inf),dig.lab = 2)),
sex = factor(case_when(sex=="F" ~ "Female",sex=="M" ~ "Male",TRUE ~ "Other/Unknown")),
ethnicity = factor(case_when(ethnicity==1 ~ "White",ethnicity==2 ~ "Mixed",ethnicity==3 ~ "Asian",ethnicity==4 ~ "Black",ethnicity==5 ~ "Other",TRUE~"Other")),
care_home_type=factor(case_when(care_home_type=="PC" ~ "Care home",care_home_type=="PN" ~ "Care home",care_home_type=="PS" ~ "Care home",TRUE ~ "Non")),
gp_consult_pre_had = ifelse(is.na(gp_consult_pre_count)|gp_consult_pre_count==0,0,1),
gp_consult_post_had = ifelse(is.na(gp_consult_post_count)|gp_consult_post_count==0,0,1),
econsult_pre_had = ifelse(is.na(econsult_pre_count)|econsult_pre_count==0,0,1),
econsult_post_had = ifelse(is.na(econsult_post_count)|econsult_post_count==0,0,1),
livingalone = ifelse(hh_size<=1,1,0),
imd_quin=ifelse(is.na(imd)|imd=="U",NA,imd),
rural_urban=factor(case_when(rural_urban %in% c(1,2,3,4)~"Urban",rural_urban %in% c(5,6,7,8)~"Rural",TRUE~"Other"))
)
View(df_cleaned)
df_cleaned %>% vars
a< -df_cleaned %>% vars
a< df_cleaned %>% vars
a<- df_cleaned %>% vars
View(a)
(gt_ocpop <- df_cleaned %>% select(vars(starts_with("history"))) %>% tbl_summary(by=oc_instance_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Characteristic | had OC**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had any OC instance**"))
(gt_ocpop <- df_cleaned %>% select(vars(c(starts_with("history")))) %>% tbl_summary(by=oc_instance_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Characteristic | had OC**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had any OC instance**"))
df_cleaned %>% select(vars(c(starts_with("history"))))
df_cleaned %>% select(starts_with("history"))
(gt_ocpop <- df_cleaned %>% select(starts_with("history")) %>% tbl_summary(by=oc_instance_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Characteristic | had OC**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had any OC instance**"))
(gt_ocpop <- df_cleaned %>% select(starts_with("history")) %>% tbl_summary(by=econsult_post_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Characteristic | had OC**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had any OC instance**"))
desc_vars2=c("sex","age","age_group","ethnicity","livingalone","region","imd_quin","rural_urban","care_home_type","gp_consult_had")
(gt_gpcpop <- df_cleaned %>% select(desc_vars2) %>% tbl_summary(by=econsult_post_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Characteristic | had GP consultation**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had any GP consultation**"))
(gt_gpcpop <- df_cleaned %>% select(desc_vars2) %>% tbl_summary(by=econsult_post_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Characteristic | had GP consultation**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had any GP consultation**"))
(gt_ocpop <- df_cleaned %>% select(c(starts_with("history"),"econsult_post_had")) %>% tbl_summary(by=econsult_post_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Characteristic | had OC**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had any OC instance**"))
(gt_ocpop <- df_cleaned %>% select(c(starts_with("history"),"econsult_post_had")) %>% tbl_summary(by=econsult_post_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Historial (pre-March 2019)**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had eConsultation code instance in Mar20-Feb21**"))
(gt_ocpop <- df_cleaned %>% select(c(starts_with("history"),"econsult_post_had")) %>% tbl_summary(by=econsult_post_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Clinical history\n (pre-March 2019)**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had eConsultation code instance in Mar20-Feb21**"))
study_pop_post <- df_cleaned %>% select(c(starts_with("history"),"econsult_pre_had","econsult_post_had"))
(gt_ocpop <- study_pop_post %>% tbl_summary(by=econsult_post_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Clinical history\n (pre-March 2019)**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had eConsultation code instance in Mar20-Feb21**"))
study_pop_post <- df_cleaned %>% select(c(starts_with("history"),"econsult_pre_had","econsult_post_had"))
(gt_ocpop <- study_pop_post %>%
tbl_summary(by=econsult_post_had) %>% add_p() %>% add_overall() %>%
modify_header(label="**Clinical history\n (pre-March 2019)**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had eConsultation code instance in Mar20-Feb21**"))
study_pop_post <- df_cleaned %>% select(c(starts_with("history"),"econsult_pre_had","econsult_post_had")) %>%
group_by(practice) %>% filter(sum(econsult_post_had,na.rm)!=0) %>% ungroup()
study_pop_post <- df_cleaned %>% group_by(practice) %>% filter(sum(econsult_post_had,na.rm)!=0) %>% ungroup() %>%
select(c(starts_with("history"),"econsult_pre_had","econsult_post_had"))
study_pop_post <- df_cleaned %>% group_by(practice) %>% filter(sum(econsult_post_had,na.rm=T)!=0) %>% ungroup() %>%
select(c(starts_with("history"),"econsult_pre_had","econsult_post_had"))
(gt_study_econsult_post <- study_consultpop_post %>%
tbl_summary(by=econsult_post_had) %>% add_p() %>% add_overall() %>%
modify_header(label="**Clinical history\n (pre-March 2019)* **") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had eConsultation code instance in Mar20-Feb21**"))
# Change contextual/cohort: rather than being for all patients in practices with eConsultation code, focus further only on patients with either GP_consult or eConsult code
## Characteristics of those with any OC consultation in the post period (pandemic), only for practices with any eConsultation coding recorded in that period. Compare those with either GPconsult or eConsult in that period
study_consultpop_post <- df_cleaned %>% group_by(practice) %>% filter(sum(econsult_post_had,na.rm=T)!=0) %>% ungroup() %>%
filter(econsult_post_had>0|gp_consult_post_had>0) %>%
select(c(starts_with("history"),"econsult_pre_had","econsult_post_had","gp_consult_post_had"))
(gt_study_econsult_post <- study_consultpop_post %>%
tbl_summary(by=econsult_post_had) %>% add_p() %>% add_overall() %>%
modify_header(label="**Clinical history\n (pre-March 2019)* **") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had eConsultation code instance in Mar20-Feb21**"))
(gt_study_econsult_post <- study_consultpop_post %>%
tbl_summary(by=econsult_post_had) %>% add_p() %>% add_overall() %>%
modify_header(label="**Clinical history\n (pre-March 2019)# **") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had eConsultation code instance in Mar20-Feb21**"))
(gt_study_econsult_post <- study_consultpop_post %>%
tbl_summary(by=econsult_post_had) %>% add_p() %>% add_overall() %>%
modify_header(label="**Clinical history\n (pre-March 2019)#**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had eConsultation code instance in Mar20-Feb21**"))
(gt_econsult_consultpop_pre <- study_consultpop_pre %>%
tbl_summary(by=econsult_pre_had) %>% add_p() %>% add_overall() %>%
modify_header(label="**Clinical history\n (pre-March 2019)#**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had eConsultation code instance in Mar19-Feb20 (among those with an eConsult/GP consultation)**"))
# Change contextual/cohort: rather than being for all patients in practices with eConsultation code, focus further only on patients with either GP_consult or eConsult code
## Characteristics of those with any OC consultation in the post period (pandemic), only for practices with any eConsultation coding recorded in that period. Compare those with either GPconsult or eConsult in that period
study_consultpop_post <- df_cleaned %>% group_by(practice) %>% filter(sum(econsult_post_had,na.rm=T)!=0) %>% ungroup() %>%
filter(econsult_post_had>0|gp_consult_post_had>0) %>%
select(c(starts_with("history"),"econsult_pre_had","econsult_post_had","gp_consult_post_had"))
(gt_econsult_consultpop_post <- study_consultpop_post %>%
tbl_summary(by=econsult_post_had) %>% add_p() %>% add_overall() %>%
modify_header(label="**Clinical history\n (pre-March 2019)#**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had eConsultation code instance in Mar20-Feb21 (among those with an eConsult/GP consultation)**"))
## Characteristics of those with any OC consultation in the pre period (pre-pandemic), only for practices with any eConsultation coding recorded in that period. Compare those with either GPconsult or eConsult in that period
study_consultpop_pre <- df_cleaned %>% group_by(practice) %>% filter(sum(econsult_pre_had,na.rm=T)!=0) %>% ungroup() %>%
filter(econsult_pre_had>0|gp_consult_pre_had>0) %>%
select(c(starts_with("history"),"econsult_pre_had","econsult_post_had","gp_consult_pre_had"))
(gt_econsult_consultpop_pre <- study_consultpop_pre %>%
tbl_summary(by=econsult_pre_had) %>% add_p() %>% add_overall() %>%
modify_header(label="**Clinical history\n (pre-March 2019)#**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had eConsultation code instance in Mar19-Feb20 (among those with an eConsult/GP consultation)**"))
# ##==============================================================================
# Analysis filename:			05-createClinicalConditiontables
# Project:				OC evaluation
# Author:					MF
# Date: 					10/05/2021
# Version: 				R
# Description:	Prevalence of top clinical conditions among those with an eConsultation code recorded
# Output to csv files
# Datasets used:			input_v2.csv
# Datasets created: 		TBA
# Other output: tables: TBA
# Log file: log-05-createClinicalConditiontables
#
## ==============================================================================
## open log connection to file
sink(here::here("logs", "log-05-createClinicalConditiontables.txt"))
flag_gtsummaryoperational = TRUE
## library
library(tidyverse)
if (flag_gtsummaryoperational){
library(gtsummary)
}
library(gt)
library(here)
library(webshot)
#webshot::install_phantomjs()
# create directory for saving tables, if not existent
if (!dir.exists(here::here("output", "tables"))){
dir.create(here::here("output", "tables"))
}
## import and pre-process cohort data
df_input <- read_csv(
here::here("output", "input_v2.csv"))
df_cleaned <- df_input %>%
mutate(age_group = factor(cut(age,breaks = c(0,18,40,50,60,70,80, Inf),dig.lab = 2)),
sex = factor(case_when(sex=="F" ~ "Female",sex=="M" ~ "Male",TRUE ~ "Other/Unknown")),
ethnicity = factor(case_when(ethnicity==1 ~ "White",ethnicity==2 ~ "Mixed",ethnicity==3 ~ "Asian",ethnicity==4 ~ "Black",ethnicity==5 ~ "Other",TRUE~"Other")),
care_home_type=factor(case_when(care_home_type=="PC" ~ "Care home",care_home_type=="PN" ~ "Care home",care_home_type=="PS" ~ "Care home",TRUE ~ "Non")),
gp_consult_pre_had = ifelse(is.na(gp_consult_pre_count)|gp_consult_pre_count==0,0,1),
gp_consult_post_had = ifelse(is.na(gp_consult_post_count)|gp_consult_post_count==0,0,1),
econsult_pre_had = ifelse(is.na(econsult_pre_count)|econsult_pre_count==0,0,1),
econsult_post_had = ifelse(is.na(econsult_post_count)|econsult_post_count==0,0,1),
livingalone = ifelse(hh_size<=1,1,0),
imd_quin=ifelse(is.na(imd)|imd=="U",NA,imd),
rural_urban=factor(case_when(rural_urban %in% c(1,2,3,4)~"Urban",rural_urban %in% c(5,6,7,8)~"Rural",TRUE~"Other"))
)
## Redactor code (W.Hulme)
redactor <- function(n, threshold){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, NA_integer_, n)
}
if (flag_gtsummaryoperational){
## Characteristics of those with any OC consultation in the post period (pandemic), only for practices with any eConsultation coding recorded in that period
study_pop_post <- df_cleaned %>% group_by(practice) %>% filter(sum(econsult_post_had,na.rm=T)!=0) %>% ungroup() %>%
select(c(starts_with("history"),"econsult_pre_had","econsult_post_had"))
(gt_econsult_pop_post <- study_pop_post %>%
tbl_summary(by=econsult_post_had) %>% add_p() %>% add_overall() %>%
modify_header(label="**Clinical history\n (pre-March 2019)**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had eConsultation code instance in Mar20-Feb21**"))
## Characteristics of those with any OC consultation in the post period (pandemic), only for practices with any eConsultation coding recorded in that period
study_pop_pre <- df_cleaned %>% group_by(practice) %>% filter(sum(econsult_pre_had,na.rm=T)!=0) %>% ungroup() %>%
select(c(starts_with("history"),"econsult_pre_had","econsult_post_had"))
(gt_econsult_pop_pre <- study_pop_pre %>%
tbl_summary(by=econsult_pre_had) %>% add_p() %>% add_overall() %>%
modify_header(label="**Clinical history\n (pre-March 2019)**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had eConsultation code instance in Mar19-Feb20**"))
# Use function from gt package to save table as neat html
gt::gtsave(as_gt(gt_econsult_pop_pre), file = file.path(here::here("output","tables"), "gt_econsult_pop_pre.html"))
gt::gtsave(as_gt(gt_econsult_pop_post), file = file.path(here::here("output","tables"), "gt_econsult_pop_post.html"))
# Change contextual/cohort: rather than being for all patients in practices with eConsultation code, focus further only on patients with either GP_consult or eConsult code
## Characteristics of those with any OC consultation in the post period (pandemic), only for practices with any eConsultation coding recorded in that period. Compare those with either GPconsult or eConsult in that period
study_consultpop_post <- df_cleaned %>% group_by(practice) %>% filter(sum(econsult_post_had,na.rm=T)!=0) %>% ungroup() %>%
filter(econsult_post_had>0|gp_consult_post_had>0) %>%
select(c(starts_with("history"),"econsult_pre_had","econsult_post_had","gp_consult_post_had"))
(gt_econsult_consultpop_post <- study_consultpop_post %>%
tbl_summary(by=econsult_post_had) %>% add_p() %>% add_overall() %>%
modify_header(label="**Clinical history\n (pre-March 2019)#**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had eConsultation code instance in Mar20-Feb21 (among those with an eConsult/GP consultation)**"))
## Characteristics of those with any OC consultation in the pre period (pre-pandemic), only for practices with any eConsultation coding recorded in that period. Compare those with either GPconsult or eConsult in that period
study_consultpop_pre <- df_cleaned %>% group_by(practice) %>% filter(sum(econsult_pre_had,na.rm=T)!=0) %>% ungroup() %>%
filter(econsult_pre_had>0|gp_consult_pre_had>0) %>%
select(c(starts_with("history"),"econsult_pre_had","econsult_post_had","gp_consult_pre_had"))
(gt_econsult_consultpop_pre <- study_consultpop_pre %>%
tbl_summary(by=econsult_pre_had) %>% add_p() %>% add_overall() %>%
modify_header(label="**Clinical history\n (pre-March 2019)#**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had eConsultation code instance in Mar19-Feb20 (among those with an eConsult/GP consultation)**"))
# Use function from gt package to save table as neat html
gt::gtsave(as_gt(gt_econsult_consultpop_pre), file = file.path(here::here("output","tables"), "gt_econsult_consultpop_pre.html"))
gt::gtsave(as_gt(gt_econsult_consultpop_post), file = file.path(here::here("output","tables"), "gt_econsult_consultpop_post.html"))
## close log connection
sink()
}
## open log connection to file
sink(here::here("logs", "log-05-createClinicalConditiontables.txt"))
flag_gtsummaryoperational = TRUE
## library
library(tidyverse)
if (flag_gtsummaryoperational){
library(gtsummary)
}
library(gt)
library(here)
library(webshot)
# create directory for saving tables, if not existent
if (!dir.exists(here::here("output", "tables"))){
dir.create(here::here("output", "tables"))
}
## import and pre-process cohort data
df_input <- read_csv(
here::here("output", "input_v2.csv"))
df_input <- df_input %>% rename(history_serious_mental_illness="serious_mental_illness_disease")
View(df_input)
df_cleaned <- df_input %>%
mutate(age_group = factor(cut(age,breaks = c(0,18,40,50,60,70,80, Inf),dig.lab = 2)),
sex = factor(case_when(sex=="F" ~ "Female",sex=="M" ~ "Male",TRUE ~ "Other/Unknown")),
ethnicity = factor(case_when(ethnicity==1 ~ "White",ethnicity==2 ~ "Mixed",ethnicity==3 ~ "Asian",ethnicity==4 ~ "Black",ethnicity==5 ~ "Other",TRUE~"Other")),
care_home_type=factor(case_when(care_home_type=="PC" ~ "Care home",care_home_type=="PN" ~ "Care home",care_home_type=="PS" ~ "Care home",TRUE ~ "Non")),
gp_consult_pre_had = ifelse(is.na(gp_consult_pre_count)|gp_consult_pre_count==0,0,1),
gp_consult_post_had = ifelse(is.na(gp_consult_post_count)|gp_consult_post_count==0,0,1),
econsult_pre_had = ifelse(is.na(econsult_pre_count)|econsult_pre_count==0,0,1),
econsult_post_had = ifelse(is.na(econsult_post_count)|econsult_post_count==0,0,1),
livingalone = ifelse(hh_size<=1,1,0),
imd_quin=ifelse(is.na(imd)|imd=="U",NA,imd),
rural_urban=factor(case_when(rural_urban %in% c(1,2,3,4)~"Urban",rural_urban %in% c(5,6,7,8)~"Rural",TRUE~"Other"))
)
## Redactor code (W.Hulme)
redactor <- function(n, threshold){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, NA_integer_, n)
}
(gt_econsult_pop_post <- study_pop_post %>%
tbl_summary(by=econsult_post_had) %>% add_p() %>% add_overall() %>%
modify_header(label="**Clinical history\n (pre-March 2019)**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had eConsultation code instance in Mar20-Feb21**"))
## Characteristics of those with any OC consultation in the post period (pandemic), only for practices with any eConsultation coding recorded in that period
study_pop_post <- df_cleaned %>% group_by(practice) %>% filter(sum(econsult_post_had,na.rm=T)!=0) %>% ungroup() %>%
select(c(starts_with("history"),"econsult_pre_had","econsult_post_had","gp_consult_pre_had","gp_consult_post_had"))
(gt_econsult_pop_post <- study_pop_post %>%
tbl_summary(by=econsult_post_had) %>% add_p() %>% add_overall() %>%
modify_header(label="**Clinical history\n (pre-March 2019)**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had eConsultation code instance in Mar20-Feb21**"))
(gt_econsult_pop_post <- study_pop_post %>%
tbl_summary(by=econsult_post_had) %>% add_p() %>% add_overall() %>%
modify_header(label="**Clinical history\n (pre-March 2019)**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had eConsultation code instance in Mar20-Feb21**"))
## Characteristics of those with any OC consultation in the post period (pandemic), only for practices with any eConsultation coding recorded in that period
study_pop_pre <- df_cleaned %>% group_by(practice) %>% filter(sum(econsult_pre_had,na.rm=T)!=0) %>% ungroup() %>%
select(c(starts_with("history"),"econsult_pre_had","econsult_post_had","gp_consult_pre_had","gp_consult_post_had"))
(gt_econsult_pop_pre <- study_pop_pre %>%
tbl_summary(by=econsult_pre_had) %>% add_p() %>% add_overall() %>%
modify_header(label="**Clinical history\n (pre-March 2019)**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had eConsultation code instance in Mar19-Feb20**"))
# ##==============================================================================
# Analysis filename:			05-createClinicalConditiontables
# Project:				OC evaluation
# Author:					MF
# Date: 					10/05/2021
# Version: 				R
# Description:	Prevalence of top clinical conditions among those with an eConsultation code recorded
# Output to csv files
# Datasets used:			input_v2.csv
# Datasets created: 		TBA
# Other output: tables: TBA
# Log file: log-05-createClinicalConditiontables
#
## ==============================================================================
## open log connection to file
sink(here::here("logs", "log-05-createClinicalConditiontables.txt"))
flag_gtsummaryoperational = TRUE
## library
library(tidyverse)
if (flag_gtsummaryoperational){
library(gtsummary)
}
library(gt)
library(here)
library(webshot)
#webshot::install_phantomjs()
# create directory for saving tables, if not existent
if (!dir.exists(here::here("output", "tables"))){
dir.create(here::here("output", "tables"))
}
## import and pre-process cohort data
df_input <- read_csv(
here::here("output", "input_v2.csv"))
df_input <- df_input %>% rename(history_serious_mental_illness="serious_mental_illness_disease")
df_cleaned <- df_input %>%
mutate(age_group = factor(cut(age,breaks = c(0,18,40,50,60,70,80, Inf),dig.lab = 2)),
sex = factor(case_when(sex=="F" ~ "Female",sex=="M" ~ "Male",TRUE ~ "Other/Unknown")),
ethnicity = factor(case_when(ethnicity==1 ~ "White",ethnicity==2 ~ "Mixed",ethnicity==3 ~ "Asian",ethnicity==4 ~ "Black",ethnicity==5 ~ "Other",TRUE~"Other")),
care_home_type=factor(case_when(care_home_type=="PC" ~ "Care home",care_home_type=="PN" ~ "Care home",care_home_type=="PS" ~ "Care home",TRUE ~ "Non")),
gp_consult_pre_had = ifelse(is.na(gp_consult_pre_count)|gp_consult_pre_count==0,0,1),
gp_consult_post_had = ifelse(is.na(gp_consult_post_count)|gp_consult_post_count==0,0,1),
econsult_pre_had = ifelse(is.na(econsult_pre_count)|econsult_pre_count==0,0,1),
econsult_post_had = ifelse(is.na(econsult_post_count)|econsult_post_count==0,0,1),
livingalone = ifelse(hh_size<=1,1,0),
imd_quin=ifelse(is.na(imd)|imd=="U",NA,imd),
rural_urban=factor(case_when(rural_urban %in% c(1,2,3,4)~"Urban",rural_urban %in% c(5,6,7,8)~"Rural",TRUE~"Other"))
)
## Redactor code (W.Hulme)
redactor <- function(n, threshold){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, NA_integer_, n)
}
if (flag_gtsummaryoperational){
## Characteristics of those with any OC consultation in the post period (pandemic), only for practices with any eConsultation coding recorded in that period
study_pop_post <- df_cleaned %>% group_by(practice) %>% filter(sum(econsult_post_had,na.rm=T)!=0) %>% ungroup() %>%
select(c(starts_with("history"),"econsult_pre_had","econsult_post_had","gp_consult_pre_had","gp_consult_post_had"))
(gt_econsult_pop_post <- study_pop_post %>%
tbl_summary(by=econsult_post_had) %>% add_p() %>% add_overall() %>%
modify_header(label="**Clinical history\n (pre-March 2019)**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had eConsultation code instance in Mar20-Feb21**"))
## Characteristics of those with any OC consultation in the post period (pandemic), only for practices with any eConsultation coding recorded in that period
study_pop_pre <- df_cleaned %>% group_by(practice) %>% filter(sum(econsult_pre_had,na.rm=T)!=0) %>% ungroup() %>%
select(c(starts_with("history"),"econsult_pre_had","econsult_post_had","gp_consult_pre_had","gp_consult_post_had"))
(gt_econsult_pop_pre <- study_pop_pre %>%
tbl_summary(by=econsult_pre_had) %>% add_p() %>% add_overall() %>%
modify_header(label="**Clinical history\n (pre-March 2019)**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had eConsultation code instance in Mar19-Feb20**"))
# Use function from gt package to save table as neat html
gt::gtsave(as_gt(gt_econsult_pop_pre), file = file.path(here::here("output","tables"), "gt_econsult_pop_pre.html"))
gt::gtsave(as_gt(gt_econsult_pop_post), file = file.path(here::here("output","tables"), "gt_econsult_pop_post.html"))
# Change contextual/cohort: rather than being for all patients in practices with eConsultation code, focus further only on patients with either GP_consult or eConsult code
## Characteristics of those with any OC consultation in the post period (pandemic), only for practices with any eConsultation coding recorded in that period. Compare those with either GPconsult or eConsult in that period
study_consultpop_post <- df_cleaned %>% group_by(practice) %>% filter(sum(econsult_post_had,na.rm=T)!=0) %>% ungroup() %>%
filter(econsult_post_had>0|gp_consult_post_had>0) %>%
select(c(starts_with("history"),"econsult_pre_had","econsult_post_had","gp_consult_pre_had","gp_consult_post_had"))
(gt_econsult_consultpop_post <- study_consultpop_post %>%
tbl_summary(by=econsult_post_had) %>% add_p() %>% add_overall() %>%
modify_header(label="**Clinical history\n (pre-March 2019)#**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had eConsultation code instance in Mar20-Feb21 (among those with an eConsult/GP consultation)**"))
## Characteristics of those with any OC consultation in the pre period (pre-pandemic), only for practices with any eConsultation coding recorded in that period. Compare those with either GPconsult or eConsult in that period
study_consultpop_pre <- df_cleaned %>% group_by(practice) %>% filter(sum(econsult_pre_had,na.rm=T)!=0) %>% ungroup() %>%
filter(econsult_pre_had>0|gp_consult_pre_had>0) %>%
select(c(starts_with("history"),"econsult_pre_had","econsult_post_had","gp_consult_pre_had","gp_consult_post_had"))
(gt_econsult_consultpop_pre <- study_consultpop_pre %>%
tbl_summary(by=econsult_pre_had) %>% add_p() %>% add_overall() %>%
modify_header(label="**Clinical history\n (pre-March 2019)#**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had eConsultation code instance in Mar19-Feb20 (among those with an eConsult/GP consultation)**"))
# Use function from gt package to save table as neat html
gt::gtsave(as_gt(gt_econsult_consultpop_pre), file = file.path(here::here("output","tables"), "gt_econsult_consultpop_pre.html"))
gt::gtsave(as_gt(gt_econsult_consultpop_post), file = file.path(here::here("output","tables"), "gt_econsult_consultpop_post.html"))
}
## close log connection
sink()
trusts_risk_raw_jun <- read_xlsx("G:/My Drive/Analytics Unit work/Cyber/Copy of 2x2 Matrix Regional Information vers 10 14062021.xlsx",sheet="Matrix",range="A2:AB220")
### Load libraries
library(tidyverse)
library(readxl)
library(openxlsx)
library(gtsummary)
library(gt)
library(here)
library(webshot)
library(aod) # for wald.test
library(summarytools)
library(ggpubr) # to use ggboxplot
webshot::install_phantomjs()
trusts_risk_raw_jun <- read_xlsx("G:/My Drive/Analytics Unit work/Cyber/Copy of 2x2 Matrix Regional Information vers 10 14062021.xlsx",sheet="Matrix",range="A2:AB220")
View(trusts_risk_raw_jun)
ggplot(trusts_risk_raw_jun %>% filter(!is.na(`Organisational Risk Scoring`)) %>% select(c("Organisational Risk Scoring","Engagement Risk Scoring") )  )
ggplot(trusts_risk_raw_jun %>% filter(!is.na(`Organisational Risk Scoring`)) %>% select(c("Organisational Risk Scoring","Engagement Risk Scoring") ),
aes(x=`Engagement Risk Scoring`,y=`Organisational Risk Scoring`)) + geom_point()
View(trusts_risk_raw_jun)
ggplot(trusts_risk_raw_jun %>% filter(!is.na(`Organisational Risk Scoring`)) %>% select(c("Cyber Risk Score pre weighted","Organisational Risk Scoring","Engagement Risk Scoring") ),
aes(x=`Engagement Risk Scoring`,y=`Cyber Risk Score pre weighted`)) + geom_point()
ggplot(trusts_risk_raw_jun %>% filter(!is.na(`Organisational Risk Scoring`)) %>% select(c("Cyber Risk Score pre weighted","Organisational Risk Scoring","Engagement Risk Score pre-weighted") ),
aes(x=`Engagement Risk Score pre-weighted`,y=`Cyber Risk Score pre weighted`)) + geom_point()
ggplot(trusts_risk_raw_jun %>% filter(!is.na(`Organisational Risk Scoring`)) %>% select(c("Cyber Risk Score pre weighted","Organisational Risk Scoring","Engagement Risk Score pre weighted") ),
aes(x=`Engagement Risk Score pre weighted`,y=`Cyber Risk Score pre weighted`)) + geom_point()
trusts_risk_raw_jun <- mutate(Status = substr(`DSPT Status`,7,str_length(`DSPT Status`)))
colnames(trusts_risk_raw_jun)
trusts_risk_raw_jun <- mutate(Status = substr(`DSPT Status`,7,str_length(`DSPT Status`)))
trusts_risk_raw_jun <- trusts_risk_raw_jun %>% mutate(Status = substr(`DSPT Status`,7,str_length(`DSPT Status`)))
trusts_risk_raw_jun(trusts_risk_raw_jun$Information=="RXH","Status")="Standards Met"
trusts_risk_raw_jun[trusts_risk_raw_jun$Information=="RXH","Status"]="Standards Met"
ggplot(trusts_risk_raw_jun %>% filter(!is.na(`Organisational Risk Scoring`)) %>% select(c("Cyber Risk Score pre weighted","Status","Organisational Risk Scoring","Engagement Risk Score pre weighted") ),
aes(x=`Engagement Risk Score pre weighted`,y=`Cyber Risk Score pre weighted`,color=Status)) + geom_point()
ggplot(trusts_risk_raw_jun %>% filter(!is.na(`Organisational Risk Scoring`)) %>% select(c("Cyber Risk Score pre weighted","Status","Organisational Risk Scoring","Engagement Risk Score pre weighted") ),
aes(x=`Engagement Risk Score pre weighted`,y=`Cyber Risk Score pre weighted`,color=Status)) + geom_point()+
scale_colour_manual(values = c("blue", "darkgreen", "orange","black"))
ggplot(trusts_risk_raw_jun %>% filter(!is.na(`Organisational Risk Scoring`)) %>% select(c("Cyber Risk Score pre weighted","Status","Organisational Risk Scoring","Engagement Risk Score pre weighted") ),
aes(x=`Engagement Risk Score pre weighted`,y=`Cyber Risk Score pre weighted`,color=Status)) + geom_point()+
scale_colour_manual(values = c("blue", "green", "orange","black"))
ggplot(trusts_risk_raw_jun %>% filter(!is.na(`Organisational Risk Scoring`)) %>% select(c("Cyber Risk Score pre weighted","Status","Organisational Risk Scoring","Engagement Risk Score pre weighted") ),
aes(x=`Engagement Risk Score pre weighted`,y=`Cyber Risk Score pre weighted`,color=Status)) + geom_point()+
scale_colour_manual(values = c("blue", "darkgreen", "orange","red"))
ggplot(trusts_risk_raw_jun %>% filter(!is.na(`Organisational Risk Scoring`)) %>% select(c("Cyber Risk Score pre weighted","Status","Organisational Risk Scoring","Engagement Risk Score pre weighted") ),
aes(x=`Engagement Risk Score pre weighted`,y=`Cyber Risk Score pre weighted`,color=Status,shape=Status),size=3) + geom_point()+
scale_colour_manual(values = c("blue", "darkgreen", "orange","red"))
ggplot(trusts_risk_raw_jun %>% filter(!is.na(`Organisational Risk Scoring`)) %>% select(c("Cyber Risk Score pre weighted","Status","Organisational Risk Scoring","Engagement Risk Score pre weighted") ),
aes(x=`Engagement Risk Score pre weighted`,y=`Cyber Risk Score pre weighted`,color=Status,shape=Status),size=5) + geom_point()+
scale_colour_manual(values = c("blue", "darkgreen", "orange","red"))
ggplot(trusts_risk_raw_jun %>% filter(!is.na(`Organisational Risk Scoring`)) %>% select(c("Cyber Risk Score pre weighted","Status","Organisational Risk Scoring","Engagement Risk Score pre weighted") ),
aes(x=`Engagement Risk Score pre weighted`,y=`Cyber Risk Score pre weighted`,color=Status,shape=Status),size=5) + geom_point()+
scale_colour_manual(values = c("blue", "darkgreen", "orange","red"))
ggplot(trusts_risk_raw_jun %>% filter(!is.na(`Organisational Risk Scoring`)) %>% select(c("Cyber Risk Score pre weighted","Status","Organisational Risk Scoring","Engagement Risk Score pre weighted") ),
aes(x=`Engagement Risk Score pre weighted`,y=`Cyber Risk Score pre weighted`,color=Status,shape=Status)) + geom_point(size=4)+
scale_colour_manual(values = c("blue", "darkgreen", "orange","red"))
ggplot(trusts_risk_raw_jun %>% filter(!is.na(`Organisational Risk Scoring`)) %>% select(c("Cyber Risk Score pre weighted","Status","Organisational Risk Scoring","Engagement Risk Score pre weighted") ),
aes(x=`Engagement Risk Score pre weighted`,y=`Cyber Risk Score pre weighted`,color=Status,shape=Status)) + geom_point(size=2)+
scale_colour_manual(values = c("blue", "darkgreen", "orange","red"))
ggplot(trusts_risk_raw_jun %>% filter(!is.na(`Organisational Risk Scoring`)) %>% select(c("Cyber Risk Score pre weighted","Status","Organisational Risk Scoring","Engagement Risk Score pre weighted") ),
aes(x=`Engagement Risk Score pre weighted`,y=`Cyber Risk Score pre weighted`,color=Status,shape=Status)) + geom_point(size=2,alpha=0.1)+
scale_colour_manual(values = c("blue", "darkgreen", "orange","red"))
ggplot(trusts_risk_raw_jun %>% filter(!is.na(`Organisational Risk Scoring`)) %>% select(c("Cyber Risk Score pre weighted","Status","Organisational Risk Scoring","Engagement Risk Score pre weighted") ),
aes(x=`Engagement Risk Score pre weighted`,y=`Cyber Risk Score pre weighted`,color=Status,shape=Status)) + geom_point(size=2,alpha=0.9)+
scale_colour_manual(values = c("blue", "darkgreen", "orange","red"))
ggplot(trusts_risk_raw_jun %>% filter(!is.na(`Organisational Risk Scoring`)) %>% select(c("Cyber Risk Score pre weighted","Status","Organisational Risk Scoring","Engagement Risk Score pre weighted") ),
aes(x=`Engagement Risk Score pre weighted`,y=`Cyber Risk Score pre weighted`,color=Status,shape=Status)) + geom_point(size=2,shape='s',alpha=0.9)+
scale_colour_manual(values = c("blue", "darkgreen", "orange","red"))
ggplot(trusts_risk_raw_jun %>% filter(!is.na(`Organisational Risk Scoring`)) %>% select(c("Cyber Risk Score pre weighted","Status","Organisational Risk Scoring","Engagement Risk Score pre weighted") ),
aes(x=`Engagement Risk Score pre weighted`,y=`Cyber Risk Score pre weighted`,color=Status)) + geom_point(size=2,alpha=0.9)+
scale_colour_manual(values = c("blue", "darkgreen", "orange","red"))
ggplot(trusts_risk_raw_jun %>% filter(!is.na(`Organisational Risk Scoring`)) %>% select(c("Cyber Risk Score pre weighted","Status","Organisational Risk Scoring","Engagement Risk Score pre weighted") ),
aes(x=`Engagement Risk Score pre weighted`,y=`Organisation Risk Scoring`,color=Status)) + geom_point(size=2,alpha=0.9)+
scale_colour_manual(values = c("blue", "darkgreen", "orange","red"))+
labs(x="Engagement Risk Score (higher is lower engagement)",y="Cyber Risk Score")
ggplot(trusts_risk_raw_jun %>% filter(!is.na(`Organisational Risk Scoring`)) %>% select(c("Cyber Risk Score pre weighted","Status","Organisation Risk Scoring","Engagement Risk Score pre weighted") ),
aes(x=`Engagement Risk Score pre weighted`,y=`Organisation Risk Scoring`,color=Status)) + geom_point(size=2,alpha=0.9)+
scale_colour_manual(values = c("blue", "darkgreen", "orange","red"))+
labs(x="Engagement Risk Score (higher is lower engagement)",y="Cyber Risk Score")
ggplot(trusts_risk_raw_jun %>% filter(!is.na(`Organisational Risk Scoring`)) %>% select(c("Cyber Risk Score pre weighted","Status","Organisational Risk Scoring","Engagement Risk Score pre weighted") ),
aes(x=`Engagement Risk Score pre weighted`,y=`Organisational Risk Scoring`,color=Status)) + geom_point(size=2,alpha=0.9)+
scale_colour_manual(values = c("blue", "darkgreen", "orange","red"))+
labs(x="Engagement Risk Score (higher is lower engagement)",y="Cyber Risk Score")
ggplot(trusts_risk_raw_jun %>% filter(!is.na(`Organisational Risk Scoring`)) %>% select(c("Cyber Risk Score pre weighted","Status","Organisational Risk Scoring","Engagement Risk Score pre weighted") ),
aes(x=`Engagement Risk Score pre weighted`,y=`Organisational Risk Scoring`,color=Status)) + geom_point(size=2,alpha=0.9)+
scale_colour_manual(values = c("blue", "darkgreen", "orange","red"))+
labs(x="Engagement Risk Score (higher is proxy for lower engagement)",y="Cyber Risk Score (higher is proxy for increased risk)")
ggplot(trusts_risk_raw_jun %>% filter(!is.na(`Organisational Risk Scoring`)) %>% select(c("Cyber Risk Score pre weighted","Status","Organisational Risk Scoring","Engagement Risk Score pre weighted") ),
aes(x=`Engagement Risk Score pre weighted`,y=`Organisational Risk Scoring`,color=Status)) + geom_point(size=2,alpha=0.9)+
scale_colour_manual(values = c("blue", "darkgreen", "orange","red"))+
labs(x="Engagement Risk Score (higher is proxy for lower engagement)",y="Cyber Risk Score (higher is proxy for increased risk)")+
theme(text = element_text(size = 16))
ggplot(trusts_risk_raw_jun %>% filter(!is.na(`Organisational Risk Scoring`)) %>% select(c("Cyber Risk Score pre weighted","Status","Organisational Risk Scoring","Engagement Risk Score pre weighted") ),
aes(x=`Engagement Risk Score pre weighted`,y=`Organisational Risk Scoring`,color=Status)) + geom_point(size=2,alpha=0.9)+
scale_colour_manual(values = c("darkgray", "darkgreen", "orange","red"))+
labs(x="Engagement Risk Score (higher is proxy for lower engagement)",y="Cyber Risk Score (higher is proxy for increased risk)")+
theme(text = element_text(size = 16))
ggplot(trusts_risk_raw_jun %>% filter(!is.na(`Organisational Risk Scoring`)) %>% select(c("Cyber Risk Score pre weighted","Status","Organisational Risk Scoring","Engagement Risk Score pre weighted") ),
aes(x=`Engagement Risk Score pre weighted`,y=`Organisational Risk Scoring`,color=Status)) + geom_point(size=2,alpha=0.9)+
scale_colour_manual(values = c("darkgreen", "darkgray", "orange","red"))+
labs(x="Engagement Risk Score (higher is proxy for lower engagement)",y="Cyber Risk Score (higher is proxy for increased risk)")+
theme(text = element_text(size = 16))
ggsave(paste0(here::here("output"),"/risk_engagement.png"),width = 17, height = 17, dpi=300,units ="cm")
here()
ggsave("G:/My Drive/Analytics Unit work/Cyber/risk_engagement.png",width = 17, height = 17, dpi=300,units ="cm")
ggplot(trusts_risk_raw_jun %>% filter(!is.na(`Organisational Risk Scoring`)) %>% select(c("Cyber Risk Score pre weighted","Status","Organisational Risk Scoring","Engagement Risk Score pre weighted") ),
aes(x=`Engagement Risk Score pre weighted`,y=`Organisational Risk Scoring`,color=Status)) + geom_point(size=2,alpha=0.9)+
scale_colour_manual(values = c("darkgreen", "darkgray", "orange","red"))+
labs(x="Engagement Risk Score (higher is proxy for lower engagement)",y="Cyber Risk Score (higher is proxy for increased risk)")+
theme(text = element_text(size = 16),legend.position="bottom")
ggsave("G:/My Drive/Analytics Unit work/Cyber/risk_engagement.png",width = 17, height = 17, dpi=300,units ="cm")
ggsave("G:/My Drive/Analytics Unit work/Cyber/risk_engagement.png",width = 24, height = 17, dpi=300,units ="cm")
### Load libraries
library(tidyverse)
library(readxl)
library(openxlsx)
library(gtsummary)
library(gt)
library(here)
library(webshot)
library(aod) # for wald.test
library(summarytools)
library(ggpubr) # to use ggboxplot
load(here(here("interim","/practices_1920_subm_plot.RData")))
org_1920_subm_plot <- prac_1920_subm_plot %>% mutate(organisation="practices")
load(here(here("interim","/trusts_1920_subm_plot.RData")))
org_1920_subm_plot <- org_1920_subm_plot %>% bind_rows(trusts_1920_subm_plot %>% mutate(organisation="trusts"))
load(here(here("interim","/ccgs_1920_subm_plot.RData")))
org_1920_subm_plot <- org_1920_subm_plot %>% bind_rows(ccg_1920_subm_plot %>% mutate(organisation="CCGs"))
ggplot(data=org_1920_subm_plot,mapping=aes(x=Week.Of.Publication,y=n)) + geom_bar(stat="identity",aes(fill=organisation))+
facet_wrap(~organisation,ncol=1,scales="free_y")+
scale_x_date(breaks="2 weeks")+
theme(axis.text.x=element_text(angle=-90))+
labs(y="Number of organisations",title="DSPT 2019/2020 - publication timeline")
