)
if (flag_gtsummaryoperational){
## Characteristics of those with any OC consultation, any GP consultation and overall population
desc_vars=c("sex","age","age_group","ethnicity","livingalone","region","rural_urban","care_home_type","oc_instance_had")
(gt_ocpop <- df_cleaned %>% select(desc_vars) %>% tbl_summary(by=oc_instance_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Characteristic | had OC**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had any OC instance**"))
desc_vars2=c("sex","age","age_group","ethnicity","livingalone","region","rural_urban","care_home_type","gp_consult_had")
(gt_gpcpop <- df_cleaned %>% select(desc_vars2) %>% tbl_summary(by=gp_consult_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Characteristic | had GP consultation**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had any GP consultation**"))
# Use function from gt package to save table as neat png
gt::gtsave(as_gt(gt_ocpop), file = file.path(here::here("output","tables"), "gt_ocpop.png"))
gt::gtsave(as_gt(gt_gpcpop), file = file.path(here::here("output","tables"), "gt_gpcpop.png"))
# steps to remove input data and strip further where possible
gt_gpcpop$inputs <- NULL
gt_gpcpop$call_list <- NULL
gt_gpcpop$meta_data <- NULL
gt_ocpop$inputs <- NULL
gt_ocpop$call_list <- NULL
gt_ocpop$meta_data <- NULL
# Save dta with actual table data, but underlying data removed
save(gt_ocpop,file = file.path(here::here("output","tables"), "gt_ocpop.RData"))
save(gt_gpcpop,file = file.path(here::here("output","tables"), "gt_gpcpop.RData"))
}
flag_gtsummaryoperational = TRUE
if (flag_gtsummaryoperational){
## Characteristics of those with any OC consultation, any GP consultation and overall population
desc_vars=c("sex","age","age_group","ethnicity","livingalone","region","rural_urban","care_home_type","oc_instance_had")
(gt_ocpop <- df_cleaned %>% select(desc_vars) %>% tbl_summary(by=oc_instance_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Characteristic | had OC**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had any OC instance**"))
desc_vars2=c("sex","age","age_group","ethnicity","livingalone","region","rural_urban","care_home_type","gp_consult_had")
(gt_gpcpop <- df_cleaned %>% select(desc_vars2) %>% tbl_summary(by=gp_consult_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Characteristic | had GP consultation**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had any GP consultation**"))
# Use function from gt package to save table as neat png
gt::gtsave(as_gt(gt_ocpop), file = file.path(here::here("output","tables"), "gt_ocpop.png"))
gt::gtsave(as_gt(gt_gpcpop), file = file.path(here::here("output","tables"), "gt_gpcpop.png"))
# steps to remove input data and strip further where possible
gt_gpcpop$inputs <- NULL
gt_gpcpop$call_list <- NULL
gt_gpcpop$meta_data <- NULL
gt_ocpop$inputs <- NULL
gt_ocpop$call_list <- NULL
gt_ocpop$meta_data <- NULL
# Save dta with actual table data, but underlying data removed
save(gt_ocpop,file = file.path(here::here("output","tables"), "gt_ocpop.RData"))
save(gt_gpcpop,file = file.path(here::here("output","tables"), "gt_gpcpop.RData"))
}
getwd()
## open log connection to file
sink(here::here("logs", "log-01-createSDtables.txt"))
flag_gtsummaryoperational = TRUE
## library
library(tidyverse)
if (flag_gtsummaryoperational){
library(gtsummary)
}
library(gt)
library(here)
# create directory for saving tables, if not existent
if (!dir.exists(here::here("output", "tables"))){
dir.create(here::here("output", "tables"))
}
## import and pre-process cohort data
df_input <- read_csv(
here::here("output", "input_ori.csv"))
df_cleaned <- df_input %>%
mutate(age_group = factor(cut(age,breaks = c(0,18,40,50,60,70,80, Inf),dig.lab = 2)),
sex = factor(case_when(sex=="F" ~ "Female",sex=="M" ~ "Male",TRUE ~ sex)),
ethnicity = factor(case_when(ethnicity==1 ~ "White",ethnicity==2 ~ "Mixed",ethnicity==3 ~ "Asian",ethnicity==4 ~ "Black",ethnicity==5 ~ "Other")),
care_home_type=factor(case_when(care_home_type=="PC" ~ "Care home",care_home_type=="PN" ~ "Care home",care_home_type=="PS" ~ "Care home",TRUE ~ "Non")),
gp_consult_had = ifelse(is.na(gp_consult_count)|gp_consult_count==0,0,1),
oc_instance_had = ifelse(is.na(OC_instance)|OC_instance==0,0,1),
livingalone = ifelse(hh_size<=1,1,0),
has_disability = ifelse(is.na(has_disability),0,has_disability),
imd_quin=ifelse(is.na(imd)|imd==0,NA_integer_,imd)
)
if (flag_gtsummaryoperational){
## Characteristics of those with any OC consultation, any GP consultation and overall population
desc_vars=c("sex","age","age_group","ethnicity","livingalone","region","rural_urban","care_home_type","oc_instance_had")
(gt_ocpop <- df_cleaned %>% select(desc_vars) %>% tbl_summary(by=oc_instance_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Characteristic | had OC**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had any OC instance**"))
desc_vars2=c("sex","age","age_group","ethnicity","livingalone","region","rural_urban","care_home_type","gp_consult_had")
(gt_gpcpop <- df_cleaned %>% select(desc_vars2) %>% tbl_summary(by=gp_consult_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Characteristic | had GP consultation**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had any GP consultation**"))
# Use function from gt package to save table as neat png
gt::gtsave(as_gt(gt_ocpop), file = file.path(here::here("output","tables"), "gt_ocpop.png"))
gt::gtsave(as_gt(gt_gpcpop), file = file.path(here::here("output","tables"), "gt_gpcpop.png"))
# steps to remove input data and strip further where possible
gt_gpcpop$inputs <- NULL
gt_gpcpop$call_list <- NULL
gt_gpcpop$meta_data <- NULL
gt_ocpop$inputs <- NULL
gt_ocpop$call_list <- NULL
gt_ocpop$meta_data <- NULL
# Save dta with actual table data, but underlying data removed
save(gt_ocpop,file = file.path(here::here("output","tables"), "gt_ocpop.RData"))
save(gt_gpcpop,file = file.path(here::here("output","tables"), "gt_gpcpop.RData"))
}
(gt_ocpop <- df_cleaned %>% select(desc_vars) %>% tbl_summary(by=oc_instance_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Characteristic | had OC**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had any OC instance**"))
(gt_ocpop <- df_cleaned %>% select(desc_vars) %>% tbl_summary(by=oc_instance_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Characteristic | had OC**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had any OC instance**"))
desc_vars2=c("sex","age","age_group","ethnicity","livingalone","region","imd_quin","rural_urban","care_home_type","gp_consult_had")
(gt_gpcpop <- df_cleaned %>% select(desc_vars2) %>% tbl_summary(by=gp_consult_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Characteristic | had GP consultation**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had any GP consultation**"))
## Characteristics of those with any OC consultation, any GP consultation and overall population
desc_vars=c("sex","age","age_group","ethnicity","livingalone","region","imd_quin","rural_urban","care_home_type","oc_instance_had")
(gt_ocpop <- df_cleaned %>% select(desc_vars) %>% tbl_summary(by=oc_instance_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Characteristic | had OC**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had any OC instance**"))
flag_gtsummaryoperational = TRUE
## library
library(tidyverse)
if (flag_gtsummaryoperational){
library(gtsummary)
}
library(gt)
library(here)
# create directory for saving tables, if not existent
if (!dir.exists(here::here("output", "tables"))){
dir.create(here::here("output", "tables"))
}
## import and pre-process cohort data
df_input <- read_csv(
here::here("output", "input_ori.csv"))
df_cleaned <- df_input %>%
mutate(age_group = factor(cut(age,breaks = c(0,18,40,50,60,70,80, Inf),dig.lab = 2)),
sex = factor(case_when(sex=="F" ~ "Female",sex=="M" ~ "Male",TRUE ~ sex)),
ethnicity = factor(case_when(ethnicity==1 ~ "White",ethnicity==2 ~ "Mixed",ethnicity==3 ~ "Asian",ethnicity==4 ~ "Black",ethnicity==5 ~ "Other")),
care_home_type=factor(case_when(care_home_type=="PC" ~ "Care home",care_home_type=="PN" ~ "Care home",care_home_type=="PS" ~ "Care home",TRUE ~ "Non")),
gp_consult_had = ifelse(is.na(gp_consult_count)|gp_consult_count==0,0,1),
oc_instance_had = ifelse(is.na(OC_instance)|OC_instance==0,0,1),
livingalone = ifelse(hh_size<=1,1,0),
has_disability = ifelse(is.na(has_disability),0,has_disability),
imd_quin=ifelse(is.na(imd)|imd==0,NA_integer_,imd)
)
if (flag_gtsummaryoperational){
## Characteristics of those with any OC consultation, any GP consultation and overall population
desc_vars=c("sex","age","age_group","ethnicity","livingalone","region","imd_quin","rural_urban","care_home_type","oc_instance_had")
(gt_ocpop <- df_cleaned %>% select(desc_vars) %>% tbl_summary(by=oc_instance_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Characteristic | had OC**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had any OC instance**"))
desc_vars2=c("sex","age","age_group","ethnicity","livingalone","region","imd_quin","rural_urban","care_home_type","gp_consult_had")
(gt_gpcpop <- df_cleaned %>% select(desc_vars2) %>% tbl_summary(by=gp_consult_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Characteristic | had GP consultation**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had any GP consultation**"))
# Use function from gt package to save table as neat png
gt::gtsave(as_gt(gt_ocpop), file = file.path(here::here("output","tables"), "gt_ocpop.png"))
gt::gtsave(as_gt(gt_gpcpop), file = file.path(here::here("output","tables"), "gt_gpcpop.png"))
# steps to remove input data and strip further where possible
gt_gpcpop$inputs <- NULL
gt_gpcpop$call_list <- NULL
gt_gpcpop$meta_data <- NULL
gt_ocpop$inputs <- NULL
gt_ocpop$call_list <- NULL
gt_ocpop$meta_data <- NULL
# Save dta with actual table data, but underlying data removed
save(gt_ocpop,file = file.path(here::here("output","tables"), "gt_ocpop.RData"))
save(gt_gpcpop,file = file.path(here::here("output","tables"), "gt_gpcpop.RData"))
}
(gt_ocpop <- df_cleaned %>% select(desc_vars) %>% tbl_summary(by=oc_instance_had) %>% add_p() %>% add_overall() %>% modify_header(label="**Characteristic | had OC**") %>% modify_spanning_header(c("stat_1", "stat_2") ~ "**Had any OC instance**"))
## Redactor code (W.Hulme)
redactor <- function(n, threshold){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, NA_integer_, n)
}
## Rates per characteristic
df_to_tbrates <- function(mydf,myvars,flag_save=0,tb_name="latest",n_redact=6) {
mytb=
mydf %>%
group_by_at(myvars) %>%
summarise(
population=n(),
gp_consult=sum(gp_consult_count,na.rm=T),
gp_consult_covg = sum(gp_consult_had,na.rm=T),
oc_instance=sum(OC_instance,na.rm=T),
oc_instance_covg=sum(oc_instance_had,na.rm=T),
) %>%
mutate(
gp_consult=redactor(gp_consult,n_redact),
gp_consult_covg = redactor(gp_consult_covg,n_redact),
oc_instance=redactor(oc_instance,n_redact),
oc_instance_covg=redactor(oc_instance_covg,n_redact),
gp_consult_rate=gp_consult/population,
gp_consult_covg_rate=gp_consult_covg/population,
oc_instance_rate=oc_instance/population,
oc_instance_covg_rate=oc_instance_covg/population
)
if (flag_save){
write.csv(mytb,paste0(here::here("output","tables"),"/",tb_name,".csv"))
}
return(mytb)
}
## OC and GP rates per STP
tb02_gpcr_stp <- df_to_tbrates(df_cleaned,c("stp"),1,"tb02_gpcr_stp")
## OC and GP rates per age and gender
tb04_gpcr_agesex <- df_to_tbrates(df_cleaned,c("age_group","sex"),1,"tb04_gpcr_agesex")
## OC and GP rates by ethnicity
tb05_gpcr_ethnicity <- df_to_tbrates(df_cleaned,c("ethnicity"),1,"tb05_gpcr_ethnicity")
## OC and GP rates by region and rurality
tb06_gpcr_ruc <- df_to_tbrates(df_cleaned,c("region","rural_urban"),1,"tb06_gpcr_ruc")
## OC and GP rates by care home status
tb07_gpcr_care <- df_to_tbrates(df_cleaned,c("care_home_type"),1,"tb07_gpcr_care")
## OC and GP rates by presence of disability
tb08_gpcr_dis <- df_to_tbrates(df_cleaned,c("has_disability"),1,"tb08_gpcr_dis")
## close log connection
sink()
## OC and GP rates by presence of disability
tb09_gpcr_imd <- df_to_tbrates(df_cleaned,c("imd_quin"),1,"tb08_gpcr_dis")
View(tb09_gpcr_imd)
## open log connection to file
sink(here::here("logs", "log-02-createtemporal.txt"))
## library
library(tidyverse)
library(here)
library(svglite)
# create directory for saving plots, if not existent
if (!dir.exists(here::here("output", "plots"))){
dir.create(here::here("output", "plots"))
}
# create directory for saving plots, if not existent
if (!dir.exists(here::here("output", "tables"))){
dir.create(here::here("output", "tables"))
}
## Redactor code (W.Hulme)
redactor <- function(n, threshold=6,e_overwrite=NA_integer_){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, e_overwrite, n)
}
n_meas=6
md_tbl <- tibble(
measure = c("gpc", "OC_Y1f3b","OC_Y22b4","OC_XaXcK","OC_computerlink","OC_alertreceived"),
measure_col=c("gp_consult_count", "OC_Y1f3b","OC_Y22b4","OC_XaXcK","OC_computerlink","OC_alertreceived"),
measure_label = c("GPconsult", "OC_Y1f3b","OC_Y22b4","OC_XaXcK","OC_computerlink","OC_alertreceived"),
by = rep("practice",1,n_meas),
by_label = rep("by practice",1,n_meas),
id = paste0(measure, "_", by),
numerator = measure,
denominator = "population",
group_by = rep("practice",1,n_meas)
)
print("> Tibble creation")
## import measures data from look-up
measures <- md_tbl %>%
mutate(
data = map(id, ~read_csv(here::here("output","measures", glue::glue("measure_{.}.csv")))),
)
p_saving <- function(id,data) {
write.csv(paste0(here::here("output","measures"),"/red_measure_",id,".csv"))
return(data)
}
# Create redacted measures and save
measures <- measures %>%
mutate(
redacted_data = pmap(lst(id,measure_col,data),
function(id,measure_col,data) {
redacted_data <- data %>% mutate_at(vars(measure_col),redactor)
redacted_data$value <- ifelse(is.na(redacted_data %>% select(measure_col)),NA,redacted_data$value)
write.csv(redacted_data,paste0(here::here("output","tables"),"/redacted_measure_",id,".csv"))
return(redacted_data)
}
)
)
measures <- measures %>% mutate(no_2020_events = pmap(lst( data, measure_col),
function(data, measure_col){
data %>% filter(as.numeric(format(date,'%Y'))==2020) %>% select(measure_col) %>% sum()
}
))
measures_gpc_pratice <- measures$data[[match("gpc_practice",measures$id)]]
measures_gpc_pop <-
measures_gpc_pratice %>%
group_by(date) %>%
summarise(population=sum(population),gp_consult_count=sum(gp_consult_count),value=gp_consult_count/population)
write.csv(measures_gpc_pop,paste0(here::here("output"),"/measures_gpc_pop.csv")) # National monthly GP consultation instances. Suppression not needed.
measures_gpc_pop %>% mutate(value_10000 = value*10000) %>%
ggplot()+
geom_line(aes_string(x="date", y="value_10000"), alpha=0.2, colour='blue', size=0.25)+
scale_x_date(date_breaks = "1 month", labels = scales::date_format("%Y-%m"))+
labs(
x=NULL, y=NULL,
title="GP consultation instances",
subtitle =  glue::glue("GP consulation rate per 10,000 patients")
)+
theme_bw()+
theme(
panel.border = element_blank(),
axis.text.x = element_text(angle = 70, vjust = 1, hjust=1),
)
ggsave(
units = "cm",
height = 10,
#width = 15,
limitsize=FALSE,
filename = str_c("plot_overall_gpc_pop.svg"),
path = here::here("output", "plots"))  # National monthly GP consultation instances. Suppression not needed.
measures <- measures %>% mutate(
data_ori=data, # data with all practices
data = map(data, ~ (.) %>% group_by(practice) %>% filter(sum(value,na.rm=T)>0)), # data with only practices with at least an observation in the study period (affects deciles)
no_prac = map(data, ~(.) %>% .$practice %>% n_distinct(na.rm=T) ),
no_prac_univ = map(data_ori, ~(.) %>% .$practice %>% n_distinct(na.rm=T))
)
quibble <- function(x, q = c(0.25, 0.5, 0.75)) {
## function that takes a vector and returns a tibble of quantiles - default is quartile
tibble("{{ x }}" := quantile(x, q), "{{ x }}_q" := q)
}
v_median <- function(x) {
tibble(median := quantile(x,0.5))
}
v_idr <- function(x){
tibble(IDR := quantile(x,0.9)-quantile(x,0.1))
}
str_medidrnarrative <- function(mydata_idr){
a<- mydata_idr %>%
summarise(date,medchange = (median - lag(median,12))/lag(median,12)*100  ) %>%
mutate(classification=case_when(
between(medchange,-15,15) ~ "no change",
medchange>15 ~ "increase",
medchange<(-60) ~ "large drop",
medchange<(-15) ~ "drop",
TRUE ~ NA_character_,
) )
paste0("Change in median from 2019: April ",
round(as.numeric(a[a$date=="2020-04-01","medchange"]),1),"% (",a[a$date=="2020-04-01","classification"],"); ",
"September ",round(as.numeric(a[a$date=="2020-09-01","medchange"]),1),"% (",a[a$date=="2020-09-01","classification"],"); ",
"December ", round(as.numeric(a[a$date=="2020-12-01","medchange"]),1),"% (",a[a$date=="2020-12-01","classification"],");")
}
flag_run=T
if(flag_run){
## generate plots for each measure within the data frame
measures_plots <- measures %>%
mutate(
data_quantiles = map(data, ~ (.) %>% group_by(date) %>% summarise(quibble(value, seq(0,1,0.1)))),
#data_median = map(data_quantiles, ~ (.) %>% group_by(date) %>% filter(value_q==0.5) %>% transmute(median=value)),
data_idr = map(data, ~ (.) %>% group_by(date) %>% summarise(v_idr(value*1000),v_median(value*1000))),
plot_by = pmap(lst( group_by, data, measure_label, by_label),
function(group_by, data, measure_label, by_label){
data %>% mutate(value_1000 = value*1000) %>%
ggplot()+
geom_line(aes_string(x="date", y="value_1000", group=group_by), alpha=0.2, colour='blue', size=0.25)+
scale_x_date(date_breaks = "1 month", labels = scales::date_format("%Y-%m"))+
labs(
x=NULL, y=NULL,
title=glue::glue("{measure_label} measurement"),
subtitle =  glue::glue("{by_label}, per 10,000 patients")
)+
theme_bw()+
theme(
panel.border = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.text.x = element_text(angle = 70, vjust = 1, hjust=1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
)
}
),
plot_quantiles = pmap(lst( group_by, data_quantiles, measure_label, by_label),
function(group_by, data_quantiles, measure_label, by_label){
data_quantiles %>% mutate(value_1000 = value*1000) %>%
ggplot()+
geom_line(aes(x=date, y=value_1000, group=value_q, linetype=value_q==0.5, size=value_q==0.5), colour='blue')+
scale_linetype_manual(breaks=c(TRUE, FALSE), values=c("solid", "dotted"), guide=FALSE)+
scale_size_manual(breaks=c(TRUE, FALSE), values=c(1, 0.4), guide=FALSE)+
scale_x_date(date_breaks = "1 month", labels = scales::date_format("%Y-%m"))+
labs(
x=NULL, y=NULL,
title=glue::glue("{measure_label} instances per 1000 patients"),
subtitle = glue::glue("quantiles {by_label}")
)+
theme_bw()+
theme(
panel.border = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.text.x = element_text(angle = 70, vjust = 1, hjust=1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
#axis.line.y = element_blank(),
)
}
),
plot_quantiles2 = pmap(lst( group_by, data_quantiles, measure_label, by_label,data_idr,no_2020_events,no_prac,no_prac_univ),
function(group_by, data_quantiles, measure_label, by_label,data_idr,no_2020_events,no_prac,no_prac_univ){
data_quantiles %>% mutate(value_1000 = value*1000) %>%
ggplot()+
geom_line(aes(x=date, y=value_1000, group=value_q, linetype=value_q==0.5, size=value_q==0.5), colour='blue')+
scale_linetype_manual(breaks=c(TRUE,FALSE), values=c("solid", "dashed"), guide=FALSE,labels=c("median","decile"))+
scale_size_manual(breaks=c(TRUE, FALSE), values=c(1, 0.5), guide=FALSE)+
scale_x_date(date_breaks = "1 month", labels = scales::date_format("%Y-%m"))+
labs(
x=NULL,
y="rate per 1,000",
linetype="metric",
title=glue::glue("{measure_label}"),
subtitle = paste0(
"Practices included: ",
no_prac, " (",round(no_prac/no_prac_univ*100,1),"%)",
"; 2020 events: ",
paste0(round(no_2020_events/1000,1),"k"),
"; 2020 patients: ",
"TBA"
),
caption=paste0("Feb median: ",
round(data_idr %>% filter(date=="2020-02-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-02-01") %>% .$IDR ,1),"), ",
"April median: ",
round(data_idr %>% filter(date=="2020-04-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-04-01") %>% .$IDR ,1),"),\n ",
"September median: ",
round(data_idr %>% filter(date=="2020-09-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-09-01") %>% .$IDR ,1),"), ",
"December median: ",
round(data_idr %>% filter(date=="2020-12-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-12-01") %>% .$IDR ,1),")\n",
str_medidrnarrative(data_idr)
)
)+
theme_bw()+
theme(
panel.border = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.text.x = element_text(angle = 70, vjust = 1, hjust=1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.line.y = element_blank(),
plot.caption = element_text(color = "gray64", size=7)
)
}
)
)
## plot the charts (by variable)
# measures_plots %>%
#   transmute(
#     plot = plot_by,
#     units = "cm",
#     height = 10,
#     width = 15,
#     limitsize=FALSE,
#     filename = str_c("plot_each_", id, ".svg"),
#     path = here::here("output", "plots"),
#   ) %>%
#   pwalk(ggsave)
## plot the charts (by quantile)
measures_plots %>%
transmute(
plot = plot_quantiles2,
units = "cm",
height = 10,
width = 15,
limitsize=FALSE,
filename = str_c("plot_quantiles_", id, ".svg"),
path = here::here("output", "plots"),
) %>%
pwalk(ggsave)
}
## close log connection
sink()
## open log connection to file
sink(here::here("logs", "log-01-createSDtables.txt"))
flag_gtsummaryoperational = TRUE
## library
library(tidyverse)
if (flag_gtsummaryoperational){
library(gtsummary)
}
library(gt)
library(here)
# create directory for saving tables, if not existent
if (!dir.exists(here::here("output", "tables"))){
dir.create(here::here("output", "tables"))
}
## import and pre-process cohort data
df_input <- read_csv(
here::here("output", "input_ori.csv"))
df_cleaned <- df_input %>%
mutate(age_group = factor(cut(age,breaks = c(0,18,40,50,60,70,80, Inf),dig.lab = 2)),
sex = factor(case_when(sex=="F" ~ "Female",sex=="M" ~ "Male",TRUE ~ sex)),
ethnicity = factor(case_when(ethnicity==1 ~ "White",ethnicity==2 ~ "Mixed",ethnicity==3 ~ "Asian",ethnicity==4 ~ "Black",ethnicity==5 ~ "Other")),
care_home_type=factor(case_when(care_home_type=="PC" ~ "Care home",care_home_type=="PN" ~ "Care home",care_home_type=="PS" ~ "Care home",TRUE ~ "Non")),
gp_consult_had = ifelse(is.na(gp_consult_count)|gp_consult_count==0,0,1),
oc_instance_had = ifelse(is.na(OC_instance)|OC_instance==0,0,1),
livingalone = ifelse(hh_size<=1,1,0),
has_disability = ifelse(is.na(has_disability),0,has_disability),
imd_quin=ifelse(is.na(imd)|imd=="U",NA,imd)
)
View(df_cleaned)
## import and pre-process cohort data
df_input <- read_csv(
here::here("output", "input_ori.csv"))
df_cleaned <- df_input %>%
mutate(age_group = factor(cut(age,breaks = c(0,18,40,50,60,70,80, Inf),dig.lab = 2)),
sex = factor(case_when(sex=="F" ~ "Female",sex=="M" ~ "Male",TRUE ~ sex)),
ethnicity = factor(case_when(ethnicity==1 ~ "White",ethnicity==2 ~ "Mixed",ethnicity==3 ~ "Asian",ethnicity==4 ~ "Black",ethnicity==5 ~ "Other")),
care_home_type=factor(case_when(care_home_type=="PC" ~ "Care home",care_home_type=="PN" ~ "Care home",care_home_type=="PS" ~ "Care home",TRUE ~ "Non")),
gp_consult_had = ifelse(is.na(gp_consult_count)|gp_consult_count==0,0,1),
oc_instance_had = ifelse(is.na(OC_instance)|OC_instance==0,0,1),
livingalone = ifelse(hh_size<=1,1,0),
has_disability = ifelse(is.na(has_disability),0,has_disability),
imd_quin=ifelse(is.na(imd)|imd=="U",NA,imd)
)
View(df_cleaned)
getwd()
