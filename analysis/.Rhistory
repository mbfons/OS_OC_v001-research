filename = str_c("emisplot_logquantiles_", id, ".svg"),
path = here::here("output", "plots"),
) %>%
pwalk(ggsave)
if(flag_run){
## generate plots for each measure within the data frame
measures_plots <- measures %>%
mutate(
data_quantiles = map(data, ~ (.) %>% group_by(date) %>% summarise(quibble(value, seq(0.1,0.9,0.1)))),
#data_median = map(data_quantiles, ~ (.) %>% group_by(date) %>% filter(value_q==0.5) %>% transmute(median=value)),
data_idr = map(data, ~ (.) %>% group_by(date) %>% summarise(v_idr(value*1000),v_median(value*1000))),
plot_by = pmap(lst( group_by, data, measure_label, by_label),
function(group_by, data, measure_label, by_label){
data %>% mutate(value_1000 = value*1000) %>%
ggplot()+
geom_line(aes_string(x="date", y="value_1000", group=group_by), alpha=0.2, colour='blue', size=0.25)+
scale_x_date(date_breaks = "1 month", labels = scales::date_format("%Y-%m"))+
labs(
x=NULL, y=NULL,
title=glue::glue("{measure_label} measurement"),
subtitle =  glue::glue("{by_label}, per 10,000 patients")
)+
theme_bw()+
theme(
panel.border = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.text.x = element_text(angle = 70, vjust = 1, hjust=1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
)
}
),
plot_logquantiles2 = pmap(lst( group_by, data_quantiles, measure_label, by_label,data_idr,no_2020_events,no_prac,no_prac_univ),
function(group_by, data_quantiles, measure_label, by_label,data_idr,no_2020_events,no_prac,no_prac_univ){
data_quantiles %>% mutate(value_1000 = value*1000) %>%
ggplot()+
geom_line(aes(x=date, y=value_1000, group=value_q, linetype=value_q==0.5, size=value_q==0.5), colour='blue')+
scale_linetype_manual(breaks=c(TRUE,FALSE), values=c("solid", "dashed"), guide=FALSE,labels=c("median","decile"))+
scale_size_manual(breaks=c(TRUE, FALSE), values=c(1, 0.5), guide=FALSE)+
scale_x_date(date_breaks = "1 month", labels = scales::date_format("%Y-%m"))+
labs(
x=NULL,
y="rate per 1,000",
linetype="metric",
title=glue::glue("{measure_label}"),
subtitle = paste0(
"Practices included: ",
no_prac, " (",round(no_prac/no_prac_univ*100,1),"%)",
"; 2020 events: ",
paste0(round(no_2020_events/1000,1),"k"),
"; 2020 patients: ",
"TBA"
),
caption=paste0("Feb median: ",
round(data_idr %>% filter(date=="2020-02-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-02-01") %>% .$IDR ,1),"), ",
"April median: ",
round(data_idr %>% filter(date=="2020-04-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-04-01") %>% .$IDR ,1),"),\n ",
"September median: ",
round(data_idr %>% filter(date=="2020-09-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-09-01") %>% .$IDR ,1),"), ",
"December median: ",
round(data_idr %>% filter(date=="2020-12-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-12-01") %>% .$IDR ,1),")\n",
str_medidrnarrative(data_idr)
)
)+
theme_bw()+
theme(
panel.border = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.text.x = element_text(angle = 70, vjust = 1, hjust=1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.line.y = element_blank(),
plot.caption = element_text(color = "gray64", size=7)
)+scale_y_log10()
}
),
plot_quantiles2 = pmap(lst( group_by, data_quantiles, measure_label, by_label,data_idr,no_2020_events,no_prac,no_prac_univ),
function(group_by, data_quantiles, measure_label, by_label,data_idr,no_2020_events,no_prac,no_prac_univ){
data_quantiles %>% mutate(value_1000 = value*1000) %>%
ggplot()+
geom_line(aes(x=date, y=value_1000, group=value_q, linetype=value_q==0.5, size=value_q==0.5), colour='blue')+
scale_linetype_manual(breaks=c(TRUE,FALSE), values=c("solid", "dashed"), guide=FALSE,labels=c("median","decile"))+
scale_size_manual(breaks=c(TRUE, FALSE), values=c(1, 0.5), guide=FALSE)+
scale_x_date(date_breaks = "1 month", labels = scales::date_format("%Y-%m"))+
labs(
x=NULL,
y="rate per 1,000",
linetype="metric",
title=glue::glue("{measure_label}"),
subtitle = paste0(
"Practices included: ",
no_prac, " (",round(no_prac/no_prac_univ*100,1),"%)",
"; 2020 events: ",
paste0(round(no_2020_events/1000,1),"k"),
"; 2020 patients: ",
"TBA"
),
caption=paste0("Feb median: ",
round(data_idr %>% filter(date=="2020-02-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-02-01") %>% .$IDR ,1),"), ",
"April median: ",
round(data_idr %>% filter(date=="2020-04-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-04-01") %>% .$IDR ,1),"),\n ",
"September median: ",
round(data_idr %>% filter(date=="2020-09-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-09-01") %>% .$IDR ,1),"), ",
"December median: ",
round(data_idr %>% filter(date=="2020-12-01") %>% .$median ,1),
" (IDR ",
round(data_idr %>% filter(date=="2020-12-01") %>% .$IDR ,1),")\n",
str_medidrnarrative(data_idr)
)
)+
theme_bw()+
theme(
panel.border = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.text.x = element_text(angle = 70, vjust = 1, hjust=1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.line.y = element_blank(),
plot.caption = element_text(color = "gray64", size=7)
)
}
)
)
## plot the charts (by variable)
# measures_plots %>%
#   transmute(
#     plot = plot_by,
#     units = "cm",
#     height = 10,
#     width = 15,
#     limitsize=FALSE,
#     filename = str_c("plot_each_", id, ".svg"),
#     path = here::here("output", "plots"),
#   ) %>%
#   pwalk(ggsave)
## plot the charts (by quantile)
measures_plots %>%
transmute(
plot = plot_quantiles2,
units = "cm",
height = 10,
width = 15,
limitsize=FALSE,
filename = str_c("emisplot_quantiles_", id, ".svg"),
path = here::here("output", "plots"),
) %>%
pwalk(ggsave)
## plot the charts (by quantile)
measures_plots %>%
transmute(
plot = plot_logquantiles2,
units = "cm",
height = 10,
width = 15,
limitsize=FALSE,
filename = str_c("emisplot_logquantiles_", id, ".svg"),
path = here::here("output", "plots"),
) %>%
pwalk(ggsave)
}
## close log connection
sink()
## open log connection to file
sink(here::here("logs", "log-05-EMIS_bycode.txt"))
## open log connection to file
sink(here::here("logs", "log-06-EMIS_bycode.txt"))
# create directory for saving plots, if not existent
if (!dir.exists(here::here("output", "plots"))){
dir.create(here::here("output", "plots"))
}
# create directory for saving plots, if not existent
if (!dir.exists(here::here("output", "tables"))){
dir.create(here::here("output", "tables"))
}
print("directories cleared")
## library
library(tidyverse)
library(here)
library(svglite)
`%!in%` = Negate(`%in%`)
## Redactor code (W.Hulme)
redactor <- function(n, threshold,e_overwrite=NA_integer_){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, e_overwrite, n)
}
print("Redactor defined")
df_input <- read_csv(
here::here("output","input_EMIS_bycode.csv"))
df_input <- df_input %>% mutate(population=1) %>% group_by(region,stp,practice) %>% summarise_all(~sum(.,na.rm=T)) %>% ungroup()
## open log connection to file
sink(here::here("logs", "log-EMIS03-createnattrends.txt"))
# create directory for saving plots, if not existent
if (!dir.exists(here::here("output", "plots"))){
dir.create(here::here("output", "plots"))
}
# create directory for saving plots, if not existent
if (!dir.exists(here::here("output", "tables"))){
dir.create(here::here("output", "tables"))
}
print("directories cleared")
## open log connection to file
sink(here::here("logs", "log-EMIS06-bycode.txt"))
# create directory for saving plots, if not existent
if (!dir.exists(here::here("output", "plots"))){
dir.create(here::here("output", "plots"))
}
# create directory for saving plots, if not existent
if (!dir.exists(here::here("output", "tables"))){
dir.create(here::here("output", "tables"))
}
print("directories cleared")
## library
library(tidyverse)
library(here)
library(svglite)
`%!in%` = Negate(`%in%`)
## Redactor code (W.Hulme)
redactor <- function(n, threshold,e_overwrite=NA_integer_){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, e_overwrite, n)
}
print("Redactor defined")
### bring in names and shorthands for codes
snomed_label=read.csv(here("codelists-local","martinaf-online-consultations-snomed-v01-28bba9bc_short.csv"))
snomed_label <- cbind(codeid = rownames(snomed_label), snomed_label)
rownames(snomed_label) <- NULL
snomed_label <- bind_rows(snomed_label,tibble(codeid="OCall",code="All codes",term="All codes"))
## import and pre-process cohort data
df_input <- read_csv(
here::here("output","input_EMIS_bycode.csv"))
df_input <- df_input %>% mutate(population=1) %>% group_by(practice) %>% summarise_all(~sum(.,na.rm=T)) %>% ungroup()
df_input <- df_input %>% mutate(month="2-year") %>% select(-patient_id)
print(df_input %>% select_if(is.numeric) %>% summarise_all(~sum(.,na.rm=T)))
print(summary(df_input))
print(head(df_input,0))
rm(df_input_now)
df_summary <- df_input %>%
group_by(month,practice) %>%
summarise_at(vars(starts_with("snomed"),population),~sum(.,na.rm=T))
print("summary created -a")
#### SNOMED - practice coverage ###
myprefix="snomed"
## Calculations for practice coverage
df_practice_flags <- df_input %>% group_by(practice) %>% summarise_at(vars(starts_with(myprefix)),~ifelse(sum(.,na.rm=T)>0,1,0))
print("practice calc 1")
tbx_practice_flags_ <- pivot_longer(df_practice_flags,cols=starts_with(myprefix),
names_to="code",
values_to="had_instance")
print("practice calc 2")
tbx_practice_flags_ <- tbx_practice_flags_ %>%
group_by(code) %>%
summarise(Present=sum(had_instance),Absent=n()-Present) %>%
mutate(Coverage=Present/(Present+Absent)) %>%
pivot_longer(c("Present","Absent"),names_to="Instance presence",values_to="no_practices") %>%
mutate(code=substr(code,nchar(myprefix)+2,nchar(code)))
print("practice calc 4")
tbx_practice_flags_$`Instance presence` <- factor(tbx_practice_flags_$`Instance presence`)
tbx_practice_flags_ <- tbx_practice_flags_ %>% left_join(snomed_label,by=c("code"="codeid"))
print("practice calc 5")
tbx_practice_flags_ <- tbx_practice_flags_ %>% mutate(slabel=paste0(term," (",round(Coverage*100,1),"%)"))
ggplot(tbx_practice_flags_, aes(fill=`Instance presence`,x=slabel, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(vjust=0),position = position_stack(vjust = 0.2))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")+
coord_flip()
ggsave(paste0(here::here("output","plots"),"/EMISsc06_fig03_pracnatcoverage.svg"),width = 30, height = 20, dpi=300,units ="cm")
print("practice fig03 saved")
#rm(df_input)
rm(df_practice_flags)
rm(tbx_practice_flags_)
#### National trends - snomed ####
myprefix="snomed"
#### National trends - snomed ####
myprefix="snomed"
df_summary_long <- df_summary %>% pivot_longer(cols=c(starts_with("snomed")),
names_to="Code",
values_to="Count") %>% mutate(Code=substr(Code,nchar(myprefix)+2,nchar(Code)))
print("national calc 1")
df_summary_long <- df_summary_long %>% ungroup() %>% group_by(month,Code) %>%
summarise(populationTPP=sum(population,na.rm=T),
practices=n_distinct(practice),
practicewithcode=sum(ifelse(Count>0,1,0)),
practicecoverage=practicewithcode/practices*100,
populationpracwithcode=sum(ifelse(Count>0,population,0)),
Count=sum(Count,na.rm=T))
df_summary_long <- df_summary_long %>% left_join(snomed_label,by=c("Code"="codeid"))
df_summary_long_s <- df_summary_long
df_summary_long_s$Count <- redactor(df_summary_long_s$Count,threshold =6,e_overwrite=NA_integer_)
df_summary_long_s <- df_summary_long_s %>% mutate(populationpracwithcode=ifelse(practicewithcode==1,NA_integer_,populationpracwithcode))
print("national calc2")
write.csv(df_summary_long_s,paste0(here::here("output","tables"),"/EMISsc06_tb01_nattrends.csv"))
print("national calc saved")
View(df_summary_long_s)
# ##==============================================================================
# Analysis filename:			EMIS03-createnattrends_codes
# Project:				Pilot on online consultation
# Author:					MF
# Date: 					14/06/2021 (save as from tpp one)
# Version: 				R
# Description:	Produce tally on instances of relevant codes over time (national trend)
# Output to csv files
# Datasets used:			input.csv
# Datasets created: 		None
# Other output: tables: 'tb*.csv'
# Log file: log-EMIS03-createnattrends.txt
#
## ==============================================================================
## open log connection to file
sink(here::here("logs", "log-EMIS06-bycode.txt"))
# create directory for saving plots, if not existent
if (!dir.exists(here::here("output", "plots"))){
dir.create(here::here("output", "plots"))
}
# create directory for saving plots, if not existent
if (!dir.exists(here::here("output", "tables"))){
dir.create(here::here("output", "tables"))
}
print("directories cleared")
## library
library(tidyverse)
library(here)
library(svglite)
`%!in%` = Negate(`%in%`)
## Redactor code (W.Hulme)
redactor <- function(n, threshold,e_overwrite=NA_integer_){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, e_overwrite, n)
}
print("Redactor defined")
### bring in names and shorthands for codes
snomed_label=read.csv(here("codelists-local","martinaf-online-consultations-snomed-v01-28bba9bc_short.csv"))
snomed_label <- cbind(codeid = rownames(snomed_label), snomed_label)
rownames(snomed_label) <- NULL
snomed_label <- bind_rows(snomed_label,tibble(codeid="OCall",code="All codes",term="All codes"))
## import and pre-process cohort data
df_input <- read_csv(
here::here("output","input_EMIS_bycode.csv"))
df_input <- df_input %>% mutate(population=1) %>% group_by(practice) %>% summarise_all(~sum(.,na.rm=T)) %>% ungroup()
df_input <- df_input %>% mutate(month="2-year") %>% select(-patient_id)
print(df_input %>% select_if(is.numeric) %>% summarise_all(~sum(.,na.rm=T)))
print(summary(df_input))
print(head(df_input,0))
df_summary <- df_input %>%
group_by(month,practice) %>%
summarise_at(vars(starts_with("snomed"),population),~sum(.,na.rm=T))
print("summary created -a")
#### SNOMED - practice coverage ###
myprefix="snomed"
## Calculations for practice coverage
df_practice_flags <- df_input %>% group_by(practice) %>% summarise_at(vars(starts_with(myprefix)),~ifelse(sum(.,na.rm=T)>0,1,0))
print("practice calc 1")
tbx_practice_flags_ <- pivot_longer(df_practice_flags,cols=starts_with(myprefix),
names_to="code",
values_to="had_instance")
print("practice calc 2")
tbx_practice_flags_ <- tbx_practice_flags_ %>%
group_by(code) %>%
summarise(Present=sum(had_instance),Absent=n()-Present) %>%
mutate(Coverage=Present/(Present+Absent)) %>%
pivot_longer(c("Present","Absent"),names_to="Instance presence",values_to="no_practices") %>%
mutate(code=substr(code,nchar(myprefix)+2,nchar(code)))
print("practice calc 4")
tbx_practice_flags_$`Instance presence` <- factor(tbx_practice_flags_$`Instance presence`)
tbx_practice_flags_ <- tbx_practice_flags_ %>% left_join(snomed_label,by=c("code"="codeid"))
print("practice calc 5")
tbx_practice_flags_ <- tbx_practice_flags_ %>% mutate(slabel=paste0(term," (",round(Coverage*100,1),"%)"))
ggplot(tbx_practice_flags_, aes(fill=`Instance presence`,x=slabel, y=no_practices,label=no_practices)) +
geom_bar( stat="identity")+
geom_text(aes(vjust=0),position = position_stack(vjust = 0.2))+
theme(axis.text.x = element_text(angle = -90),text = element_text(size=15))+
labs(title="Portion of practices with code recorded",y="Count of practices",x="Code")+
coord_flip()
print("practice fig03 created")
ggsave(paste0(here::here("output","plots"),"/EMISsc06_fig03_pracnatcoverage.svg"),width = 30, height = 20, dpi=300,units ="cm")
print("practice fig03 saved")
#rm(df_input)
rm(df_practice_flags)
rm(tbx_practice_flags_)
#### Summary on practice coverage and population rates - snomed ####
myprefix="snomed"
df_summary_long <- df_summary %>% pivot_longer(cols=c(starts_with("snomed")),
names_to="Code",
values_to="Count") %>% mutate(Code=substr(Code,nchar(myprefix)+2,nchar(Code)))
print("national calc 1")
df_summary_long <- df_summary_long %>% ungroup() %>% group_by(month,Code) %>%
summarise(populationTPP=sum(population,na.rm=T),
practices=n_distinct(practice),
practicewithcode=sum(ifelse(Count>0,1,0)),
practicecoverage=practicewithcode/practices*100,
populationpracwithcode=sum(ifelse(Count>0,population,0)),
Count=sum(Count,na.rm=T))
df_summary_long <- df_summary_long %>% left_join(snomed_label,by=c("Code"="codeid"))
df_summary_long_s <- df_summary_long
df_summary_long_s$Count <- redactor(df_summary_long_s$Count,threshold =6,e_overwrite=NA_integer_)
df_summary_long_s <- df_summary_long_s %>% mutate(populationpracwithcode=ifelse(practicewithcode==1,NA_integer_,populationpracwithcode))
print("national calc2")
write.csv(df_summary_long_s,paste0(here::here("output","tables"),"/EMISsc06_tb01_nat.csv"))
print("national calc saved")
# Disclosiveness: national monthly tally of clinical code occurrence, not deemed disclosive.
## close log connection
sink()
## open log connection to file
sink(here::here("logs", "log-EMIS04-weekly2021.txt"))
# create directory for saving tables, if not existent
if (!dir.exists(here::here("output", "tables"))){
dir.create(here::here("output", "tables"))
}
print("directories cleared")
## library
library(tidyverse)
library(here)
library(svglite)
`%!in%` = Negate(`%in%`)
## Redactor code (W.Hulme)
redactor <- function(n, threshold=6,e_overwrite=NA_integer_){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, e_overwrite, n)
}
print("Redactor defined")
### bring in names and shorthands for codes
snomed_label=read.csv(here("codelists-local","martinaf-online-consultations-snomed-v01-28bba9bc_min_short.csv"))
snomed_label <- cbind(codeid = rownames(snomed_label), snomed_label)
### bring in names and shorthands for codes
snomed_label=read.csv(here("codelists-local","martinaf-online-consultations-snomed-v01-28bba9bc_min_short.csv"))
snomed_label <- cbind(codeid = rownames(snomed_label), snomed_label)
rownames(snomed_label) <- NULL
snomed_label <- bind_rows(snomed_label,tibble(codeid="OCall",code="All codes",term="All codes"))
i=1
suffix = paste0("snomed_",snomed_label[i,1])
df_input <- read_csv(here::here("output","emismeasures-weekly",paste0("measure_",suffix,"_practice.csv"))) %>%
mutate(Code=snomed_label[i,1]) %>%
rename(Count=suffix)
for (i in 2:nrow(snomed_label)){
suffix = paste0("snomed_",snomed_label[i,1])
df_now <- read_csv(here::here("output","emismeasures-weekly",paste0("measure_",suffix,"_practice.csv"))) %>%
mutate(Code=snomed_label[i,1]) %>%
rename(Count=suffix)
df_input <- bind_rows(df_input,df_now)
}
# Leave only national TPP information rather than regional
df_output <- df_input %>% group_by(Code,date) %>% summarise(Count=sum(Count,na.rm=T),population=sum(population,na.rm=T)) %>% ungroup()
# Redact (<6 rule)
df_output <- df_output %>% mutate_at(vars(population,Count),redactor)
# Add shorthand
df_output <- df_output %>% left_join(snomed_label,by=c("Code"="codeid"))
# Save redacted file
write.csv(df_output,paste0(here::here("output","tables"),"/EMISsc04-weeklynattrend.csv")) # National weekly counts and rates of 3 codes. Redaction applied to <6.
## close log connection
sink()
